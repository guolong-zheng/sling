get_trace.py:65 - 0
dynsl.py:144 - Inferring pre-conditions at the location 8 ...

dynsl.py:144 - Inferring post-conditions at the location 33 ...

dynsl.py:144 - Inferring post-conditions at the location 23 ...

dynsl.py:194 - ==============================
dynsl.py:195 - Precondition at location 8:
dynsl.py:202 - (exists mi!bst!9, mx!bst!10. bst(x, mi!bst!9:int, mx!bst!10:int) & True)
dynsl.py:204 - Corresponding postconditions:
dynsl.py:208 - Postconditions at location 33:
dynsl.py:213 - (exists mi!bst!366, mx!bst!367, mx!bst!429, mi!bst!428. right:b_node->b_node{tmp, right_right, fv!365} * bst(right_right, mi!bst!366:int, mx!bst!367:int) * bst(x, mi!bst!428:int, mx!bst!429:int) * left:b_node->b_node{fv!507, fv!508, fv!509} & right=res & fv!508=fv!507 & fv!508=nil & mx!bst!429=mi!bst!428 & fv!507=nil)
dynsl.py:213 - (exists mi!bst!366, mx!bst!367, mi!bst!510, mx!bst!511. right:b_node->b_node{tmp, right_right, fv!365} * bst(right_right, mi!bst!366:int, mx!bst!367:int) * x:b_node->b_node{fv!466, fv!467, fv!468} * bst(left, mi!bst!510:int, mx!bst!511:int) & right=res & mx!bst!511=mi!bst!510 & fv!467=fv!466 & fv!467=nil & fv!466=nil)
dynsl.py:213 - (exists mi!bst!366, mx!bst!367, mx!bst!429, mi!bst!428, mi!bst!469, mx!bst!470. right:b_node->b_node{tmp, right_right, fv!365} * bst(right_right, mi!bst!366:int, mx!bst!367:int) * bst(x, mi!bst!428:int, mx!bst!429:int) * bst(left, mi!bst!469:int, mx!bst!470:int) & right=res & mi!bst!469=mx!bst!470 & mx!bst!429=mi!bst!428)
dynsl.py:213 - (exists mi!bst!366, mx!bst!367. right:b_node->b_node{tmp, right_right, fv!365} * bst(right_right, mi!bst!366:int, mx!bst!367:int) * x:b_node->b_node{fv!466, fv!467, fv!468} * left:b_node->b_node{fv!548, fv!549, fv!550} & right=res & fv!548=fv!549 & fv!548=fv!467 & fv!548=fv!466 & fv!548=nil & fv!549=fv!467 & fv!549=fv!466 & fv!549=nil & fv!467=fv!466 & fv!467=nil & fv!466=nil)
dynsl.py:208 - Postconditions at location 23:
dynsl.py:213 - (exists mx!bst!552, mi!bst!551. bst(x, mi!bst!551:int, mx!bst!552:int) * left:b_node->b_node{nil, nil, fv!580} & mi!bst!551=mx!bst!552 & left=res)
dynsl.py:213 - (exists mx!bst!582, mi!bst!581. x:b_node->b_node{nil, nil, fv!565} * bst(left, mi!bst!581:int, mx!bst!582:int) & mx!bst!582=mi!bst!581 & left=res)
dynsl.py:213 - x:b_node->b_node{nil, nil, fv!565} * left:b_node->b_node{nil, nil, fv!595} & left=res
dynsl.py:213 - (exists mx!bst!552, mi!bst!551, mx!bst!567, mi!bst!566. bst(x, mi!bst!551:int, mx!bst!552:int) * bst(left, mi!bst!566:int, mx!bst!567:int) & mx!bst!552=mi!bst!551 & mi!bst!566=mx!bst!567 & left=res)
dynsl.py:231 - ==============================
dynsl.py:254 - Number of locations: 3
dynsl.py:255 - Number of traces: 8
dynsl.py:256 - Number of pre-defined predicates: 1
dynsl.py:258 - Number of free variables: 57
dynsl.py:259 - Number of atomic singleton predicates: 12
dynsl.py:260 - Number of atomic inductive predicates: 13
dynsl.py:261 - Number of pure constraints: 32
dynsl.py:262 - Number of total invs: 9
dynsl.py:263 - Number of pres:1
dynsl.py:264 - Number of post:8
dynsl.py:265 - Number of loop:0
dynsl.py:266 - Running time (sec): 9.56115579605
../example_numric/binary_search_tree/remove_root_rec,3,8,9,57,12,13,32,9,1,8,0,9.56
