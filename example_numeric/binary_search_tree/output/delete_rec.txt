get_trace.py:65 - 0
dynsl.py:144 - Inferring post-conditions at the location 43 ...

dynsl.py:144 - Inferring post-conditions at the location 35 ...

dynsl.py:144 - Inferring pre-conditions at the location 21 ...

dynsl.py:144 - Inferring post-conditions at the location 23 ...

dynsl.py:194 - ==============================
dynsl.py:195 - Precondition at location 21:
dynsl.py:202 - (exists mi!bst!526, mx!bst!527. bst(x, mi!bst!526:int, mx!bst!527:int) & True)
dynsl.py:204 - Corresponding postconditions:
dynsl.py:208 - Postconditions at location 35:
dynsl.py:213 - (exists mi!bst!269, mx!bst!270, mi!bst!484, mx!bst!485. bst(xr, mi!bst!269:int, mx!bst!270:int) * x:b_node->b_node{l, xr, fv!399} * bst(l, mi!bst!484:int, mx!bst!485:int) & xl=l & xr=nil & x=res)
dynsl.py:213 - (exists mi!bst!269, mx!bst!270, mi!bst!442, mx!bst!443. bst(xr, mi!bst!269:int, mx!bst!270:int) * x:b_node->b_node{l, xr, fv!376} * bst(l, mi!bst!442:int, mx!bst!443:int) & xl=l & xr=nil & x=res)
dynsl.py:213 - (exists mi!bst!269, mx!bst!270, mi!bst!400, mx!bst!401. bst(xr, mi!bst!269:int, mx!bst!270:int) * x:b_node->b_node{l, xr, fv!353} * bst(l, mi!bst!400:int, mx!bst!401:int) & xl=l & xr=nil & x=res)
dynsl.py:208 - Postconditions at location 43:
dynsl.py:213 - (exists mi!bst!87, mx!bst!88, mx!bst!255, mi!bst!254. bst(xr, mi!bst!87:int, mx!bst!88:int) * x:b_node->b_node{xl, xr, fv!238} * bst(xl, mi!bst!254:int, mx!bst!255:int) & mx!bst!255=mi!bst!254 & r=xr & x=res)
dynsl.py:213 - (exists mi!bst!9, mx!bst!10, mi!bst!202, mx!bst!203. bst(xr, mi!bst!9:int, mx!bst!10:int) * x:b_node->b_node{xl, xr, fv!186} * bst(xl, mi!bst!202:int, mx!bst!203:int) & r=xr & mx!bst!203=mi!bst!202 & x=res)
dynsl.py:213 - (exists mi!bst!87, mx!bst!88. bst(xr, mi!bst!87:int, mx!bst!88:int) * x:b_node->b_node{xl, xr, fv!238} * xl:b_node->b_node{nil, nil, fv!268} & r=xr & x=res)
dynsl.py:213 - (exists mi!bst!9, mx!bst!10, mi!bst!187, mx!bst!188. bst(xr, mi!bst!9:int, mx!bst!10:int) * x:b_node->b_node{xl, xr, fv!175} * bst(xl, mi!bst!187:int, mx!bst!188:int) & mx!bst!188=mi!bst!187 & r=xr & x=res)
dynsl.py:213 - (exists mi!bst!87, mx!bst!88. bst(xr, mi!bst!87:int, mx!bst!88:int) * x:b_node->b_node{xl, xr, fv!227} * xl:b_node->b_node{nil, nil, fv!253} & r=xr & x=res)
dynsl.py:213 - (exists mi!bst!9, mx!bst!10. bst(xr, mi!bst!9:int, mx!bst!10:int) * x:b_node->b_node{xl, xr, fv!186} * xl:b_node->b_node{nil, nil, fv!216} & r=xr & x=res)
dynsl.py:213 - (exists mi!bst!9, mx!bst!10. bst(xr, mi!bst!9:int, mx!bst!10:int) * x:b_node->b_node{xl, xr, fv!175} * xl:b_node->b_node{nil, nil, fv!201} & r=xr & x=res)
dynsl.py:213 - (exists mi!bst!87, mx!bst!88, mx!bst!240, mi!bst!239. bst(xr, mi!bst!87:int, mx!bst!88:int) * x:b_node->b_node{xl, xr, fv!227} * bst(xl, mi!bst!239:int, mx!bst!240:int) & mx!bst!240=mi!bst!239 & r=xr & x=res)
dynsl.py:208 - Postconditions at location 23:
dynsl.py:213 - x=nil & x=res & nil=res
dynsl.py:231 - ==============================
dynsl.py:254 - Number of locations: 4
dynsl.py:255 - Number of traces: 10
dynsl.py:256 - Number of pre-defined predicates: 1
dynsl.py:258 - Number of free variables: 73
dynsl.py:259 - Number of atomic singleton predicates: 15
dynsl.py:260 - Number of atomic inductive predicates: 19
dynsl.py:261 - Number of pure constraints: 32
dynsl.py:262 - Number of total invs: 13
dynsl.py:263 - Number of pres:1
dynsl.py:264 - Number of post:12
dynsl.py:265 - Number of loop:0
dynsl.py:266 - Running time (sec): 14.3174190521
../example_numric/binary_search_tree/delete_rec,4,10,13,73,15,19,32,13,1,12,0,14.3
