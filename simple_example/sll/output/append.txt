get_trace.py:63 - [
1 - 8:
{
x2: 0
x1: 0}

{
}

,


3 - 8:
{
x2: 14995472
x1: 0}

{
14995472: (node, [key:383, next:14995504])
14995504: (node, [key:-114, next:14995536])
14995568: (node, [key:-85, next:14995600])
14995536: (node, [key:-223, next:14995568])
14995600: (node, [key:793, next:0])}

,


5 - 8:
{
x2: 0
x1: 14995632}

{
14995632: (node, [key:-665, next:14995664])
14995664: (node, [key:386, next:14995696])
14995696: (node, [key:-508, next:14995728])
14995728: (node, [key:-351, next:14995760])
14995760: (node, [key:421, next:0])}

,


6 - 8:
{
x2: 0
x1: 14995664}

{
14995664: (node, [key:386, next:14995696])
14995696: (node, [key:-508, next:14995728])
14995728: (node, [key:-351, next:14995760])
14995760: (node, [key:421, next:0])}

,


7 - 8:
{
x2: 0
x1: 14995696}

{
14995696: (node, [key:-508, next:14995728])
14995728: (node, [key:-351, next:14995760])
14995760: (node, [key:421, next:0])}

,


8 - 8:
{
x2: 0
x1: 14995728}

{
14995728: (node, [key:-351, next:14995760])
14995760: (node, [key:421, next:0])}

,


9 - 8:
{
x2: 0
x1: 14995760}

{
14995760: (node, [key:421, next:0])}

,


10 - 8:
{
x2: 0
x1: 0}

{
}

,


17 - 8:
{
x2: 14995952
x1: 14995792}

{
14995952: (node, [key:926, next:14995984])
14995792: (node, [key:-638, next:14995824])
14995824: (node, [key:-973, next:14995856])
14995856: (node, [key:-310, next:14995888])
14995888: (node, [key:-941, next:14995920])
14995920: (node, [key:763, next:0])
14995984: (node, [key:-460, next:14996016])
14996016: (node, [key:426, next:14996048])
14996048: (node, [key:172, next:14996080])
14996080: (node, [key:736, next:0])}

,


18 - 8:
{
x2: 14995952
x1: 14995824}

{
14995952: (node, [key:926, next:14995984])
14995824: (node, [key:-973, next:14995856])
14995856: (node, [key:-310, next:14995888])
14995888: (node, [key:-941, next:14995920])
14995920: (node, [key:763, next:0])
14995984: (node, [key:-460, next:14996016])
14996016: (node, [key:426, next:14996048])
14996048: (node, [key:172, next:14996080])
14996080: (node, [key:736, next:0])}

,


19 - 8:
{
x2: 14995952
x1: 14995856}

{
14995952: (node, [key:926, next:14995984])
14995856: (node, [key:-310, next:14995888])
14995888: (node, [key:-941, next:14995920])
14995920: (node, [key:763, next:0])
14995984: (node, [key:-460, next:14996016])
14996016: (node, [key:426, next:14996048])
14996048: (node, [key:172, next:14996080])
14996080: (node, [key:736, next:0])}

,


20 - 8:
{
x2: 14995952
x1: 14995888}

{
14995952: (node, [key:926, next:14995984])
14995888: (node, [key:-941, next:14995920])
14995920: (node, [key:763, next:0])
14995984: (node, [key:-460, next:14996016])
14996016: (node, [key:426, next:14996048])
14996048: (node, [key:172, next:14996080])
14996080: (node, [key:736, next:0])}

,


21 - 8:
{
x2: 14995952
x1: 14995920}

{
14995952: (node, [key:926, next:14995984])
14995920: (node, [key:763, next:0])
14995984: (node, [key:-460, next:14996016])
14996016: (node, [key:426, next:14996048])
14996048: (node, [key:172, next:14996080])
14996080: (node, [key:736, next:0])}

,


22 - 8:
{
x2: 14995952
x1: 0}

{
14995952: (node, [key:926, next:14995984])
14995984: (node, [key:-460, next:14996016])
14996080: (node, [key:736, next:0])
14996048: (node, [key:172, next:14996080])
14996016: (node, [key:426, next:14996048])}

]
get_trace.py:64 - [
2 - 10:
{
x2: 0
x1: 0}

{
}

return: 0,


4 - 10:
{
x2: 14995472
x1: 0}

{
14995472: (node, [key:383, next:14995504])
14995504: (node, [key:-114, next:14995536])
14995568: (node, [key:-85, next:14995600])
14995536: (node, [key:-223, next:14995568])
14995600: (node, [key:793, next:0])}

return: 14995472,


11 - 10:
{
x2: 0
x1: 0}

{
}

return: 0,


12 - 15:
{
x2: 0
tmp: 0
x1: 14995760}

{
14995760: (node, [key:421, next:0])}

return: 14995760,


13 - 15:
{
x2: 0
tmp: 14995760
x1: 14995728}

{
14995728: (node, [key:-351, next:14995760])
14995760: (node, [key:421, next:0])}

return: 14995728,


14 - 15:
{
x2: 0
tmp: 14995728
x1: 14995696}

{
14995696: (node, [key:-508, next:14995728])
14995728: (node, [key:-351, next:14995760])
14995760: (node, [key:421, next:0])}

return: 14995696,


15 - 15:
{
x2: 0
tmp: 14995696
x1: 14995664}

{
14995664: (node, [key:386, next:14995696])
14995696: (node, [key:-508, next:14995728])
14995728: (node, [key:-351, next:14995760])
14995760: (node, [key:421, next:0])}

return: 14995664,


16 - 15:
{
x2: 0
tmp: 14995664
x1: 14995632}

{
14995632: (node, [key:-665, next:14995664])
14995664: (node, [key:386, next:14995696])
14995696: (node, [key:-508, next:14995728])
14995728: (node, [key:-351, next:14995760])
14995760: (node, [key:421, next:0])}

return: 14995632,


23 - 10:
{
x2: 14995952
x1: 0}

{
14995952: (node, [key:926, next:14995984])
14995984: (node, [key:-460, next:14996016])
14996080: (node, [key:736, next:0])
14996048: (node, [key:172, next:14996080])
14996016: (node, [key:426, next:14996048])}

return: 14995952,


24 - 15:
{
x2: 14995952
tmp: 14995952
x1: 14995920}

{
14995952: (node, [key:926, next:14995984])
14995920: (node, [key:763, next:14995952])
14995984: (node, [key:-460, next:14996016])
14996016: (node, [key:426, next:14996048])
14996048: (node, [key:172, next:14996080])
14996080: (node, [key:736, next:0])}

return: 14995920,


25 - 15:
{
x2: 14995952
tmp: 14995920
x1: 14995888}

{
14995952: (node, [key:926, next:14995984])
14995888: (node, [key:-941, next:14995920])
14995920: (node, [key:763, next:14995952])
14995984: (node, [key:-460, next:14996016])
14996016: (node, [key:426, next:14996048])
14996048: (node, [key:172, next:14996080])
14996080: (node, [key:736, next:0])}

return: 14995888,


26 - 15:
{
x2: 14995952
tmp: 14995888
x1: 14995856}

{
14995952: (node, [key:926, next:14995984])
14995856: (node, [key:-310, next:14995888])
14995888: (node, [key:-941, next:14995920])
14995920: (node, [key:763, next:14995952])
14995984: (node, [key:-460, next:14996016])
14996016: (node, [key:426, next:14996048])
14996048: (node, [key:172, next:14996080])
14996080: (node, [key:736, next:0])}

return: 14995856,


27 - 15:
{
x2: 14995952
tmp: 14995856
x1: 14995824}

{
14995952: (node, [key:926, next:14995984])
14995824: (node, [key:-973, next:14995856])
14995856: (node, [key:-310, next:14995888])
14995888: (node, [key:-941, next:14995920])
14995920: (node, [key:763, next:14995952])
14995984: (node, [key:-460, next:14996016])
14996016: (node, [key:426, next:14996048])
14996048: (node, [key:172, next:14996080])
14996080: (node, [key:736, next:0])}

return: 14995824,


28 - 15:
{
x2: 14995952
tmp: 14995824
x1: 14995792}

{
14995952: (node, [key:926, next:14995984])
14995792: (node, [key:-638, next:14995824])
14995824: (node, [key:-973, next:14995856])
14995856: (node, [key:-310, next:14995888])
14995888: (node, [key:-941, next:14995920])
14995920: (node, [key:763, next:14995952])
14995984: (node, [key:-460, next:14996016])
14996016: (node, [key:426, next:14996048])
14996048: (node, [key:172, next:14996080])
14996080: (node, [key:736, next:0])}

return: 14995792]
get_trace.py:65 - 0
dynsl.py:144 - Inferring pre-conditions at the location 8 ...

dynsl.py:144 - Inferring post-conditions at the location 10 ...

dynsl.py:144 - Inferring post-conditions at the location 15 ...

dynsl.py:194 - ==============================
dynsl.py:195 - Precondition at location 8:
dynsl.py:202 - ls(x2, nil) * ll(x1) & True
dynsl.py:202 - ll(x2) * ls(x1, nil) & True
dynsl.py:202 - ll(x2) * ll(x1) & True
dynsl.py:202 - ls(x2, nil) * ls(x1, nil) & True
dynsl.py:204 - Corresponding postconditions:
dynsl.py:208 - Postconditions at location 10:
dynsl.py:213 - ls(x2, x1) & x2=res & x1=nil
dynsl.py:213 - ls(x2, nil) & x2=res & x1=nil
dynsl.py:213 - ll(x2) & x2=res & x1=nil
dynsl.py:208 - Postconditions at location 15:
dynsl.py:213 - ls(x2, nil) * ls(tmp, x2) * ls(x1, tmp) & x1=res
dynsl.py:213 - ll(x2) * ls(tmp, x2) * ls(x1, tmp) & x1=res
dynsl.py:213 - ll(x2) * ls(tmp, x2) * x1:node->node{fv!1090, tmp} & x1=res
dynsl.py:213 - ls(x2, nil) * ls(tmp, x2) * x1:node->node{fv!949, tmp} & x1=res
dynsl.py:231 - ==============================
dynsl.py:254 - Number of locations: 3
dynsl.py:255 - Number of traces: 28
dynsl.py:256 - Number of pre-defined predicates: 2
dynsl.py:258 - Number of free variables: 35
dynsl.py:259 - Number of atomic singleton predicates: 2
dynsl.py:260 - Number of atomic inductive predicates: 21
dynsl.py:261 - Number of pure constraints: 10
dynsl.py:262 - Number of total invs: 11
dynsl.py:263 - Number of pres:4
dynsl.py:264 - Number of post:7
dynsl.py:265 - Number of loop:0
dynsl.py:266 - Running time (sec): 11.2717890739
../simple_example/sll/append,3,28,12,35,2,21,10,11,4,7,0,11.2
