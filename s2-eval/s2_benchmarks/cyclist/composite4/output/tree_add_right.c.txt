
!!!Full processing file "cyclist/composite4/tree_add_right.c"
Parsing file "cyclist/composite4/tree_add_right.c" by cil parser...
GCC Preprocessing...
gcc -C -E cyclist/composite4/tree_add_right.c -o cyclist/composite4/tree_add_right.c.prep

!!! generate unknown predicate for Pre synthesis of subtree_get_count: :HP_17
!!! generate unknown predicate for Post synthesis of subtree_get_count: :GP_18
!!! generate unknown predicate for Pre synthesis of fixup_ancestors: :HP_19
!!! generate unknown predicate for Post synthesis of fixup_ancestors: :GP_20
!!! generate unknown predicate for Pre synthesis of tree_add_right: :HP_25
!!! generate unknown predicate for Post synthesis of tree_add_right: :GP_26
!!! ss:EInfer @shape[HP_25,GP_26] EBase: [][](HRel HP_25(node))*(true)( FLOW __norm) {EAssume: 10,:(HRel GP_26(node,res))*(true)( FLOW __norm)}
!!! processing primitives "["prelude.ss"]
Starting z3... 

Checking procedure subtree_get_count$node... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[ HP_17,GP_18]requires HP_17(node)&
truerequires emp
 ensures GP_18(node)&true{,(4,5)=__norm#E};
Starting Omega.../usr/local/bin/oc

*************************************
*******shape relational assumptions ********
*************************************
[ // BIND
(1;0)HP_17(node)&
node!=null --> node::node<left_7_1375,right_7_1376,parent_7_1377,count_7_1378> * 
HP_1379(left_7_1375) * HP_1380(right_7_1376) * HP_1381(parent_7_1377)&
true,
 // POST
(1;0)HP_1379(left_7_1375) * HP_1380(right_7_1376) * HP_1381(parent_7_1377) * 
node::node<left_7_1375,right_7_1376,parent_7_1377,count_7_1378>&
true --> GP_18(node)&
true,
 // POST
(2;0)HP_17(node)&node=null --> GP_18(node)&
true]

Procedure subtree_get_count$node SUCCESS.

*********************************************************
*******relational definition ********
*********************************************************
[ HP_17(node_1384) ::= 
 node_1384::node<DP_DP_HP_1379,DP_DP_HP_1380,DP_DP_HP_1381,count_7_1378>
 or emp&node_1384=null
 (4,5),
 GP_18(node_1385) ::= HP_17(node_1385)(4,5)]
*************************************

!!! INFERRED SHAPE SPEC: EBase node::HP_17{}<>&{FLOW,(4,5)=__norm#E}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                 EAssume 
                   node::HP_17{}<>&{FLOW,(1,29)=__flow#E}[]
                   
Checking procedure fixup_ancestors$node~node~int... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[ HP_1404,GP_20]requires HP_1404(p,n@NI)&
truerequires emp
 ensures GP_20(n,p)&true{,(4,5)=__norm#E};

*************************************
*******shape relational assumptions ********
*************************************
[ // BIND
(2;0)HP_19(n@NI,p)&
p!=null --> p::node<left_17_1411,right_17_1412,parent_17_1413,count_17_1414> * 
HP_1415(left_17_1411,n@NI) * HP_1416(right_17_1412,n@NI) * 
HP_1417(parent_17_1413,n@NI)&
true,
 // PRE
(1;2;0)HP_1416(right_17_1412,left_17_1411@NI)&
n=left_17_1411 --> right_17_1412::HP_17<>&
true,
 // PRE
(2;2;0)HP_1415(left_17_1411,n@NI)&left_17_1411!=n --> left_17_1411::HP_17<>&
true,
 // PRE_REC
(1;2;0)HP_1417(grandparent_53',left_17_1411@NI)&
n=left_17_1411 |#| p'::node<left_17_1411,right_17_1412,grandparent_53',pcount_56'>&
(leftCount_54'=(pcount_56'-rightCount_55')-1 | count=(pcount_56'-
rightCount_55')-1 | count'=(pcount_56'-rightCount_55')-
1) --> HP_19(p'@NI,grandparent_53')&
true,
 // POST
(1;0)HP_19(n@NI,p)&p=null --> GP_20(n,p)&
true,
 // POST
(1;2;0)HP_1415(left_17_1411,n@NI) * right_17_1412::HP_17<> * 
p::node<left_17_1411,right_17_1412,parent_17_1413,pcount_1468> * 
GP_20(p,parent_17_1413)&n=left_17_1411 --> GP_20(left_17_1411,p)&
true,
 // POST
(2;2;0)HP_1416(right_17_1412,n@NI) * left_17_1411::HP_17<> * 
p::node<left_17_1411,right_17_1412,parent_17_1413,pcount_1470> * 
GP_20(p,parent_17_1413)&n!=left_17_1411 --> GP_20(n,p)&
true]

Procedure fixup_ancestors$node~node~int SUCCESS.

*********************************************************
*******relational definition ********
*********************************************************
[ HP_19(n_1605,p_1606) |#| 
                          emp&(leftCount_54'=(count_17_1558-rightCount_55')-
                          1 | count=(count_17_1558-rightCount_55')-1 | 
                          count'=(count_17_1558-rightCount_55')-1)
                          or emp&(leftCount_54'=(count_17_1558-
                             rightCount_55')-1 | count=(count_17_1558-
                             rightCount_55')-1 | count'=(count_17_1558-
                             rightCount_55')-1)
                          or emp&(leftCount_54'=(count_17_1558-
                             rightCount_55')-1 | count=(count_17_1558-
                             rightCount_55')-1 | count'=(count_17_1558-
                             rightCount_55')-1)
                          or emp&n_1605!=left_17_1559 & 
                             ((leftCount_54'=(count_17_1558-rightCount_55')-
                             1 | count=(count_17_1558-rightCount_55')-1 | 
                             count'=(count_17_1558-rightCount_55')-1))
                           ::= 
 HP_19(p_1606,parent_17_1560) * 
 p_1606::node<left_17_1559,DP_DP_DP_1472,parent_17_1560,count_17_1558>&
 n_1605=left_17_1559
 or HP_19(p_1606,parent_17_1560) * 
    p_1606::node<left_17_1559,DP_DP_DP_1472,parent_17_1560,count_17_1558> * 
    left_17_1559::HP_17<>&left_17_1559!=n_1605
 or HP_19(p_1606,parent_17_1560) * 
    p_1606::node<left_17_1559,right_17_1557,parent_17_1560,count_17_1558> * 
    right_17_1557::HP_17<>&n_1605=left_17_1559
 or HP_19(p_1606,parent_17_1560) * 
    p_1606::node<left_17_1559,right_17_1557,parent_17_1560,count_17_1558> * 
    left_17_1559::HP_17<> * right_17_1557::HP_17<>&left_17_1559!=n_1605
 or emp&p_1606=null
 (4,5),
 GP_20(n_1607,p_1608) ::= 
 right_17_1412::HP_17<> * 
 p_1608::node<n_1607,right_17_1412,parent_17_1413,pcount_1468> * 
 GP_20(p_1608,parent_17_1413)
 or left_17_1411::HP_17<> * 
    p_1608::node<left_17_1411,right_17_1412,parent_17_1413,pcount_1470> * 
    GP_20(p_1608,parent_17_1413) * right_17_1412::HP_17<>&
    n_1607!=left_17_1411
 or left_17_1411::HP_17<> * 
    p_1608::node<left_17_1411,DP_DP_DP_1472,parent_17_1413,pcount_1470> * 
    GP_20(p_1608,parent_17_1413)&n_1607!=left_17_1411
 or emp&p_1608=null
 (4,5),
 GP_18(node_1385) ::= HP_17(node_1385)(4,5),
 HP_17(node_1384) ::= 
 node_1384::node<DP_DP_HP_1379,DP_DP_HP_1380,DP_DP_HP_1381,count_7_1378>
 or emp&node_1384=null
 (4,5)]
*************************************

!!! INFERRED SHAPE SPEC: EBase HP_1404(p,n)&{FLOW,(4,5)=__norm#E}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                 EAssume 
                   (exists n: p::GP_20{}<n>&{FLOW,(4,5)=__norm#E})[]
                   
Checking procedure tree_add_right$node... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[@shape HP_25,GP_26]requires HP_25(node)&
truerequires emp
 ensures GP_26(node,res)&true{,(4,5)=__norm#E};

*************************************
*******shape relational assumptions ********
*************************************
[ // BIND
(0)HP_25(node)&
true --> node::node<left_49_1843,right_49_1844,parent_49_1845,count_49_1846> * 
HP_1847(left_49_1843) * HP_1848(right_49_1844) * HP_1849(parent_49_1845)&
true,
 // PRE
(0)n_57'::node<left_48_1841,right_48_1842,node',Anon_1814> * 
HP_1847(left_49_1843) * HP_1849(parent_49_1845) * 
node'::node<left_49_1843,n_57',parent_49_1845,count_49_1846>&
left_48_1841=null & right_48_1842=null & 
right_48_1842=left_48_1841 --> HP_1404(node',n_57'@NI)&
true,
 // POST
(0)node::GP_20<n_1863>&res!=null --> GP_26(node,res)&
true]

Procedure tree_add_right$node SUCCESS.
Timeout when checking #simplify  Restarting Omega after ... 141 invocations Stop Omega... 141 invocations Starting Omega.../usr/local/bin/oc
Timeout when checking #simplify  Restarting Omega after ... 143 invocations Stop Omega... 143 invocations Starting Omega.../usr/local/bin/oc
