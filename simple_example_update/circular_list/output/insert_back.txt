dynsl.py:221 - Inferring pre-conditions at the location 16 ...

dynsl.py:221 - Inferring post-conditions at the location 27 ...

dynsl.py:221 - Inferring post-conditions at the location 22 ...

dynsl.py:271 - ==============================
dynsl.py:272 - Precondition at location 16:
dynsl.py:281 -  lseg(x, x) 
dynsl.py:288 - Postconditions at location 27:
dynsl.py:293 - lseg(x, tl) * lseg(tl, next) * lseg(next, x) 
dynsl.py:293 - lseg(x, tl) * tl:node->node{ni, next} * lseg(next, x)  & tl = res
dynsl.py:293 - x:node->node{fv0, tl} * tl:node->node{ni, next} * lseg(next, x)  & tl = res
dynsl.py:293 - x:node->node{fv0, tl} * lseg(tl, next) * lseg(next, x) 
dynsl.py:288 - Postconditions at location 22:
dynsl.py:293 - lseg(x, tl) * lseg(tl, next) 
dynsl.py:293 - lseg(x, tl) * tl:node->node{ni, x}  & tl = res
dynsl.py:293 - lseg(x, tl) * tl:node->node{nil, x}  & tl = res
dynsl.py:293 - x:node->node{fv0, tl} * lseg(tl, next) 
dynsl.py:293 - x:node->node{fv0, tl} * tl:node->node{ni, x}  & tl = res
dynsl.py:293 - x:node->node{fv0, tl} * lseg(tl, x) 
dynsl.py:293 - lseg(x, tl) * lseg(tl, x) 
dynsl.py:293 - x:node->node{fv0, tl} * tl:node->node{nil, x} 
dynsl.py:312 - ==============================
dynsl.py:336 - Number of locations: 3
dynsl.py:337 - Number of traces: 4
dynsl.py:338 - Number of pre-defined predicates: 1
dynsl.py:340 - Number of free variables: 6
dynsl.py:341 - Number of atomic singleton predicates: 12
dynsl.py:342 - Number of atomic inductive predicates: 17
dynsl.py:343 - Number of pure constraints: 5
dynsl.py:344 - Number of total invs: 13
dynsl.py:345 - Number of pres:1
dynsl.py:346 - Number of post:12
dynsl.py:347 - Number of loop:0
dynsl.py:348 - Running time (sec): 3.97250890732
../simple_example_update/circular_list/insert_back,3,4,6,12,17,5,13,1,12,0,3.97
