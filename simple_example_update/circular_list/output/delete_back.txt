get_trace.py:65 - 0
dynsl.py:144 - Inferring post-conditions at the location 26 ...

dynsl.py:144 - Inferring pre-conditions at the location 22 ...

dynsl.py:144 - Inferring post-conditions at the location 31 ...

dynsl.py:194 - ==============================
dynsl.py:195 - Precondition at location 22:
dynsl.py:202 - (exists fv!16. lseg(x, fv!16) & x=fv!16)
dynsl.py:204 - Corresponding postconditions:
dynsl.py:208 - Postconditions at location 26:
dynsl.py:213 - x:node->node{fv!9, x} & x=next & nil=res
dynsl.py:213 - (exists fv!10. lseg(x, fv!10) & x=fv!10 & x=next & fv!10=next & nil=res)
dynsl.py:213 - lseg(x, next) & x=next & nil=res
dynsl.py:213 - x:node->node{fv!15, x} & x=next & nil=res
dynsl.py:208 - Postconditions at location 31:
dynsl.py:213 - lseg(x, hd_next) * lseg(hd_next, x) & hd_next=next & hd_next=res & next=res
dynsl.py:213 - x:node->node{fv!47, hd_next} * lseg(hd_next, x) & hd_next=next & hd_next=res & next=res
dynsl.py:213 - lseg(x, next) * lseg(hd_next, x) & hd_next=next & hd_next=res & next=res
dynsl.py:213 - x:node->node{fv!52, hd_next} * lseg(hd_next, x) & hd_next=next & hd_next=res & next=res
dynsl.py:231 - ==============================
dynsl.py:254 - Number of locations: 3
dynsl.py:255 - Number of traces: 4
dynsl.py:256 - Number of pre-defined predicates: 1
dynsl.py:258 - Number of free variables: 33
dynsl.py:259 - Number of atomic singleton predicates: 4
dynsl.py:260 - Number of atomic inductive predicates: 9
dynsl.py:261 - Number of pure constraints: 23
dynsl.py:262 - Number of total invs: 9
dynsl.py:263 - Number of pres:1
dynsl.py:264 - Number of post:8
dynsl.py:265 - Number of loop:0
dynsl.py:266 - Running time (sec): 3.73730111122
../simple_example_update/circular_list/delete_back,3,4,1,33,4,9,23,9,1,8(4),0,3.73,0,4
