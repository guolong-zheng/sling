dynsl.py:221 - Inferring post-conditions at the location 26 ...

dynsl.py:221 - Inferring pre-conditions at the location 22 ...

dynsl.py:221 - Inferring post-conditions at the location 31 ...

dynsl.py:299 - Precondition at location 22:
dynsl.py:307 -  lseg(x, x) 
dynsl.py:309 - ==============================
dynsl.py:312 - Postcondition at location 26:
dynsl.py:320 - lseg(x, next)  & re = nil
dynsl.py:320 - x:node->node{nil, x}  & re = nil
dynsl.py:320 -  lseg(x, x)  & res = nil
dynsl.py:312 - Postcondition at location 31:
dynsl.py:320 - lseg(x, hd_next) * lseg(hd_next, x)  & hd_next = res
dynsl.py:320 - x:node->node{fv0, hd_next} * lseg(hd_next, x)  & hd_next = res
dynsl.py:320 - lseg(x, next) * lseg(hd_next, x)  & hd_next = res
dynsl.py:322 - ==============================
dynsl.py:338 - ==============================
dynsl.py:363 - Number of locations: 3
dynsl.py:364 - Number of traces: 4
dynsl.py:365 - Number of pre-defined predicates: 1
dynsl.py:367 - Number of free variables: 1
dynsl.py:368 - Number of atomic singleton predicates: 2
dynsl.py:369 - Number of atomic inductive predicates: 8
dynsl.py:370 - Number of pure constraints: 6
dynsl.py:371 - Number of total invs: 7
dynsl.py:372 - Number of pres:1
dynsl.py:373 - Number of post:6
dynsl.py:374 - Number of loop:0
dynsl.py:375 - Running time (sec): 3.84937310219
../simple_example_update/circular_list/delete_back,3,4,1,2,8,6,7,1,6,0,3.84
../simple_example_update/circular_list/delete_back,3,4,2,8,6,7,1,6,0,3.84
