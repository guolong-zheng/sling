dynsl.py:221 - Inferring inv-conditions at the location 28 ...

dynsl.py:221 - Inferring post-conditions at the location 18 ...

dynsl.py:221 - Inferring pre-conditions at the location 12 ...

dynsl.py:221 - Inferring post-conditions at the location 14 ...

dynsl.py:221 - Inferring post-conditions at the location 46 ...

dynsl.py:271 - ==============================
dynsl.py:272 - Precondition at location 12:
dynsl.py:281 - list(list) 
dynsl.py:281 - lseg(list, nil) 
dynsl.py:288 - Postconditions at location 18:
dynsl.py:293 -  lseg(l2, fv0) * list(list) * lseg(l2_next, fv1) * lseg(l1, fv0)  & list = res
dynsl.py:293 -  lseg(l2, fv1) * list:node->node{fv3, fv2} * lseg(l2_next, fv0) * lseg(l1, fv1)  & list = res
dynsl.py:293 -  lseg(l2, fv0) * lseg(list, nil) * lseg(l2_next, fv1) * lseg(l1, fv0)  & list = res
dynsl.py:288 - Postconditions at location 46:
dynsl.py:293 -  lseg(list, fv0) * list(t2) * lseg(l2, t2) * lseg(l1, t1)  & res = nil & l2_next = nil & ret = nil & ret = res
dynsl.py:293 -  lseg(list, fv0) * lseg(t2, nil) * lseg(l2, t2) * lseg(l1, t1)  & res = nil & l2_next = nil & ret = nil & ret = res
dynsl.py:288 - Postconditions at location 14:
dynsl.py:293 - list(l2) * l1:node->node{fv0, list}  & re = nil & list = nil & l2_next = nil & l2_next = res
dynsl.py:293 - list(l2) * lseg(l1, nil)  & re = nil & list = nil & l2_next = nil & l2_next = res
dynsl.py:293 - lseg(l2, nil) * lseg(l1, nil)  & re = nil & list = nil & l2_next = nil & l2_next = res
dynsl.py:293 - lseg(l2, nil) * l1:node->node{fv0, list}  & re = nil & list = nil & l2_next = nil & l2_next = res
dynsl.py:293 - list(l2) * list(l1)  & re = nil & list = nil & l2_next = nil & l2_next = res
dynsl.py:293 - lseg(l2, nil) * list(l1)  & re = nil & list = nil & l2_next = nil & l2_next = res
dynsl.py:300 - Invariants at location 28:
dynsl.py:308 - lseg(l2, l2_next) * lseg(list, l1) * lseg(l2_next, nil) * lseg(l1, l2) 
dynsl.py:308 - lseg(l2, l2_next) * lseg(list, l1) * list(l2_next) * lseg(l1, l2) 
dynsl.py:308 - l2:node->node{fv0, l2_next} * lseg(list, l1) * lseg(l2_next, nil) * lseg(l1, l2) 
dynsl.py:308 - l2:node->node{fv0, l2_next} * lseg(list, l1) * list(l2_next) * lseg(l1, l2) 
dynsl.py:312 - ==============================
dynsl.py:336 - Number of locations: 5
dynsl.py:337 - Number of traces: 52
dynsl.py:338 - Number of pre-defined predicates: 2
dynsl.py:340 - Number of free variables: 14
dynsl.py:341 - Number of atomic singleton predicates: 5
dynsl.py:342 - Number of atomic inductive predicates: 45
dynsl.py:343 - Number of pure constraints: 35
dynsl.py:344 - Number of total invs: 17
dynsl.py:345 - Number of pres:2
dynsl.py:346 - Number of post:11
dynsl.py:347 - Number of loop:4
dynsl.py:348 - Running time (sec): 116.107102156
../simple_example_update/glib_gslist/g_slist_sort_real,5,52,14,5,45,35,17,2,11,4,116.
