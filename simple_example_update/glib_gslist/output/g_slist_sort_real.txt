dynsl.py:201 - Inferring inv-conditions at the location 28 ...

dynsl.py:201 - Inferring post-conditions at the location 18 ...

dynsl.py:201 - Inferring pre-conditions at the location 12 ...

dynsl.py:201 - Inferring post-conditions at the location 14 ...

dynsl.py:201 - Inferring post-conditions at the location 46 ...

dynsl.py:251 - ==============================
dynsl.py:252 - Precondition at location 12:
dynsl.py:261 - list(list) 
dynsl.py:261 - lseg(list, nil) 
dynsl.py:268 - Postconditions at location 18:
dynsl.py:273 -  lseg(l2, fv1) * list:node->node{fv3, fv2} * lseg(l2_next, fv0) * lseg(l1, fv1) 
dynsl.py:273 -  lseg(l2, fv0) * list(list) * lseg(l2_next, fv1) * lseg(l1, fv0) 
dynsl.py:273 -  lseg(l2, fv0) * lseg(list, nil) * lseg(l2_next, fv1) * lseg(l1, fv0) 
dynsl.py:268 - Postconditions at location 46:
dynsl.py:273 -  lseg(list, fv0) * lseg(t2, l2_next) * lseg(l2, t2) * lseg(l1, t1) 
dynsl.py:273 -  lseg(list, fv0) * lseg(t2, ret) * lseg(l2, t2) * lseg(l1, t1) 
dynsl.py:273 -  lseg(list, fv0) * list(t2) * lseg(l2, t2) * lseg(l1, t1) 
dynsl.py:273 -  lseg(list, fv0) * lseg(t2, nil) * lseg(l2, t2) * lseg(l1, t1) 
dynsl.py:268 - Postconditions at location 14:
dynsl.py:273 - list(l2) * lseg(l1, list) 
dynsl.py:273 - lseg(l2, l2_next) * lseg(l1, list) 
dynsl.py:273 - list(l2) * lseg(l1, nil) 
dynsl.py:273 - lseg(l2, list) * lseg(l1, nil) 
dynsl.py:273 - lseg(l2, nil) * l1:node->node{fv0, list} 
dynsl.py:273 - lseg(l2, l2_next) * lseg(l1, l2_next) 
dynsl.py:273 - lseg(l2, list) * list(l1) 
dynsl.py:273 - list(l2) * lseg(l1, l2_next) 
dynsl.py:273 - lseg(l2, nil) * list(l1) 
dynsl.py:273 - list(l2) * list(l1) 
dynsl.py:273 - lseg(l2, list) * l1:node->node{fv0, list} 
dynsl.py:273 - lseg(l2, nil) * lseg(l1, nil) 
dynsl.py:273 - lseg(l2, list) * lseg(l1, l2_next) 
dynsl.py:273 - lseg(l2, l2_next) * list(l1) 
dynsl.py:273 - lseg(l2, nil) * lseg(l1, l2_next) 
dynsl.py:273 - lseg(l2, list) * lseg(l1, list) 
dynsl.py:273 - list(l2) * l1:node->node{fv0, list} 
dynsl.py:273 - lseg(l2, nil) * lseg(l1, list) 
dynsl.py:273 - lseg(l2, l2_next) * l1:node->node{fv0, list} 
dynsl.py:273 - lseg(l2, l2_next) * lseg(l1, nil) 
dynsl.py:280 - Invariants at location 28:
dynsl.py:288 - lseg(l2, l2_next) * lseg(list, l1) * lseg(l2_next, nil) * lseg(l1, l2) 
dynsl.py:288 - lseg(l2, l2_next) * lseg(list, l1) * list(l2_next) * lseg(l1, l2) 
dynsl.py:288 - l2:node->node{fv0, l2_next} * lseg(list, l1) * lseg(l2_next, nil) * lseg(l1, l2) 
dynsl.py:288 - l2:node->node{fv0, l2_next} * lseg(list, l1) * list(l2_next) * lseg(l1, l2) 
dynsl.py:292 - ==============================
dynsl.py:315 - Number of locations: 5
dynsl.py:316 - Number of traces: 52
dynsl.py:317 - Number of pre-defined predicates: 2
dynsl.py:319 - Number of free variables: 173
dynsl.py:320 - Number of atomic singleton predicates: 7
dynsl.py:321 - Number of atomic inductive predicates: 79
dynsl.py:322 - Number of pure constraints: 151
dynsl.py:323 - Number of total invs: 33
dynsl.py:324 - Number of pres:2
dynsl.py:325 - Number of post:27
dynsl.py:326 - Number of loop:4
dynsl.py:327 - Running time (sec): 115.23920989
../simple_example_update/glib_gslist/g_slist_sort_real,5,52,173,7,79,151,33,2,27,4,115.
