dynsl.py:221 - Inferring pre-conditions at the location 9 ...

dynsl.py:221 - Inferring inv-conditions at the location 18 ...

dynsl.py:221 - Inferring post-conditions at the location 38 ...

dynsl.py:271 - ==============================
dynsl.py:272 - Precondition at location 9:
dynsl.py:281 - lseg(l2, nil) * list(l1) 
dynsl.py:281 - list(l2) * lseg(l1, nil) 
dynsl.py:281 - lseg(l2, nil) * lseg(l1, nil) 
dynsl.py:281 - list(l2) * list(l1) 
dynsl.py:288 - Postconditions at location 38:
dynsl.py:293 -  list:node->node{fv3, fv2} * lseg(l, fv1) * list(l2) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:293 -  lseg(list, fv2) * lseg(l, fv1) * list(l2) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:293 -  lseg(list, fv2) * lseg(l, fv1) * lseg(l2, nil) * list(l1) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:293 -  list:node->node{fv3, fv2} * lseg(l, fv1) * list(l2) * list(l1) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:293 -  lseg(list, fv2) * lseg(l, fv1) * lseg(l2, nil) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:293 -  list:node->node{fv3, fv2} * lseg(l, fv1) * lseg(l2, nil) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:293 -  list:node->node{fv3, fv2} * lseg(l, fv1) * lseg(l2, nil) * list(l1) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:293 -  lseg(list, fv2) * lseg(l, fv1) * list(l2) * list(l1) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:300 - Invariants at location 18:
dynsl.py:308 -  lseg(list, y) * lseg(l, fv1) * lseg(l2, nil) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil
dynsl.py:308 -  lseg(list, y) * lseg(l, fv1) * lseg(l2, nil) * list(l1) * lseg(y, fv0)  & list_next = nil
dynsl.py:308 -  lseg(list, y) * lseg(l, fv1) * list(l2) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil
dynsl.py:308 -  lseg(list, y) * lseg(l, fv1) * list(l2) * list(l1) * lseg(y, fv0)  & list_next = nil
dynsl.py:308 -  list:node->node{fv2, y} * lseg(l, fv1) * lseg(l2, nil) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil
dynsl.py:308 -  list:node->node{fv2, y} * lseg(l, fv1) * lseg(l2, nil) * list(l1) * lseg(y, fv0)  & list_next = nil
dynsl.py:308 -  list:node->node{fv2, y} * lseg(l, fv1) * list(l2) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil
dynsl.py:308 -  list:node->node{fv2, y} * lseg(l, fv1) * list(l2) * list(l1) * lseg(y, fv0)  & list_next = nil
dynsl.py:312 - ==============================
dynsl.py:336 - Number of locations: 3
dynsl.py:337 - Number of traces: 27
dynsl.py:338 - Number of pre-defined predicates: 2
dynsl.py:340 - Number of free variables: 48
dynsl.py:341 - Number of atomic singleton predicates: 8
dynsl.py:342 - Number of atomic inductive predicates: 80
dynsl.py:343 - Number of pure constraints: 32
dynsl.py:344 - Number of total invs: 20
dynsl.py:345 - Number of pres:4
dynsl.py:346 - Number of post:8
dynsl.py:347 - Number of loop:8
dynsl.py:348 - Running time (sec): 640.15033102
../simple_example_update/glib_gslist/g_slist_sort_merge,3,27,48,8,80,32,20,4,8,8,640.
