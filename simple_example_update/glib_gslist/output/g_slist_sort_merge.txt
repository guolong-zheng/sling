dynsl.py:221 - Inferring pre-conditions at the location 9 ...

dynsl.py:221 - Inferring inv-conditions at the location 18 ...

dynsl.py:221 - Inferring post-conditions at the location 38 ...

dynsl.py:299 - Precondition at location 9:
dynsl.py:307 - lseg(l2, nil) * lseg(l1, nil) 
dynsl.py:307 - lseg(l2, nil) * list(l1) 
dynsl.py:307 - list(l2) * lseg(l1, nil) 
dynsl.py:307 - list(l2) * list(l1) 
dynsl.py:309 - ==============================
dynsl.py:312 - Postcondition at location 38:
dynsl.py:320 -  lseg(list, fv2) * lseg(l, fv1) * lseg(l2, nil) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:320 -  lseg(list, fv2) * lseg(l, fv1) * lseg(l2, nil) * list(l1) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:320 -  lseg(list, fv2) * lseg(l, fv1) * list(l2) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:320 -  lseg(list, fv2) * lseg(l, fv1) * list(l2) * list(l1) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:320 -  list:node->node{fv3, fv2} * lseg(l, fv1) * lseg(l2, nil) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:320 -  list:node->node{fv3, fv2} * lseg(l, fv1) * lseg(l2, nil) * list(l1) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:320 -  list:node->node{fv3, fv2} * lseg(l, fv1) * list(l2) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:320 -  list:node->node{fv3, fv2} * lseg(l, fv1) * list(l2) * list(l1) * lseg(y, fv0)  & list_next = nil & res = nil & list_next = res
dynsl.py:322 - ==============================
dynsl.py:326 - Invariants at location 18:
dynsl.py:334 -  lseg(list, y) * lseg(l, fv1) * lseg(l2, nil) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil
dynsl.py:334 -  lseg(list, y) * lseg(l, fv1) * lseg(l2, nil) * list(l1) * lseg(y, fv0)  & list_next = nil
dynsl.py:334 -  lseg(list, y) * lseg(l, fv1) * list(l2) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil
dynsl.py:334 -  lseg(list, y) * lseg(l, fv1) * list(l2) * list(l1) * lseg(y, fv0)  & list_next = nil
dynsl.py:334 -  list:node->node{fv2, y} * lseg(l, fv1) * lseg(l2, nil) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil
dynsl.py:334 -  list:node->node{fv2, y} * lseg(l, fv1) * lseg(l2, nil) * list(l1) * lseg(y, fv0)  & list_next = nil
dynsl.py:334 -  list:node->node{fv2, y} * lseg(l, fv1) * list(l2) * lseg(l1, nil) * lseg(y, fv0)  & list_next = nil
dynsl.py:334 -  list:node->node{fv2, y} * lseg(l, fv1) * list(l2) * list(l1) * lseg(y, fv0)  & list_next = nil
dynsl.py:338 - ==============================
dynsl.py:363 - Number of locations: 3
dynsl.py:364 - Number of traces: 27
dynsl.py:365 - Number of pre-defined predicates: 2
dynsl.py:367 - Number of free variables: 48
dynsl.py:368 - Number of atomic singleton predicates: 8
dynsl.py:369 - Number of atomic inductive predicates: 80
dynsl.py:370 - Number of pure constraints: 32
dynsl.py:371 - Number of total invs: 20
dynsl.py:372 - Number of pres:4
dynsl.py:373 - Number of post:8
dynsl.py:374 - Number of loop:8
dynsl.py:375 - Running time (sec): 645.151710033
../simple_example_update/glib_gslist/g_slist_sort_merge,3,27,48,8,80,32,20,4,8,8,645.
../simple_example_update/glib_gslist/g_slist_sort_merge,3,27,8,80,32,20,4,8,8,645.
