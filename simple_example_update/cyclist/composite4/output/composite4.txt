dynsl.py:167 - Inferring post-conditions at the location 96 ...

dynsl.py:167 - Inferring post-conditions at the location 65 ...

dynsl.py:167 - Inferring pre-conditions at the location 37 ...

dynsl.py:167 - Inferring pre-conditions at the location 71 ...

dynsl.py:167 - Inferring post-conditions at the location 40 ...

dynsl.py:167 - Inferring pre-conditions at the location 46 ...

dynsl.py:167 - Inferring post-conditions at the location 81 ...

dynsl.py:167 - Inferring pre-conditions at the location 110 ...

dynsl.py:167 - Inferring post-conditions at the location 23 ...

dynsl.py:167 - Inferring pre-conditions at the location 88 ...

dynsl.py:167 - Inferring post-conditions at the location 122 ...

dynsl.py:167 - Inferring post-conditions at the location 31 ...

dynsl.py:167 - Inferring pre-conditions at the location 127 ...

dynsl.py:217 - ==============================
dynsl.py:218 - Precondition at location 37:
dynsl.py:227 - tseg(node, nil) & True
dynsl.py:227 - tree(node) & True
dynsl.py:229 - Corresponding postconditions:
dynsl.py:234 - Postconditions at location 40:
dynsl.py:239 - tseg(node, nil) & True
dynsl.py:239 - tree(node) & True
dynsl.py:234 - Postconditions at location 65:
dynsl.py:239 - tseg(p, n) * tseg(n, nil) & True
dynsl.py:239 - tseg(p, n) * tree(n) & True
dynsl.py:234 - Postconditions at location 122:
dynsl.py:239 - (exists fv0. tseg(node, fv0) & True)
dynsl.py:234 - Postconditions at location 96:
dynsl.py:239 - tseg(node, n) * n:node->node{nodeRight, nodeRight, node, fv0} & nodeRight=fv0 & nodeRight=nil & fv0=nil & n=res
dynsl.py:239 - tseg(node, n) * tree(n) & nodeRight=nil & n=res
dynsl.py:239 - tseg(node, n) * tseg(n, nil) & nodeRight=nil & n=res
dynsl.py:239 - tseg(node, n) * n:node->node{nodeRight, nodeRight, node, fv0} & fv0=nodeRight & fv0=nil & nodeRight=nil & n=res
dynsl.py:239 - tseg(node, n) * tseg(n, nodeRight) & nodeRight=nil & n=res
dynsl.py:217 - ==============================
dynsl.py:218 - Precondition at location 71:
dynsl.py:227 - tseg(node, nil) & True
dynsl.py:227 - tree(node) & True
dynsl.py:229 - Corresponding postconditions:
dynsl.py:234 - Postconditions at location 122:
dynsl.py:239 - (exists fv0. tseg(node, fv0) & True)
dynsl.py:217 - ==============================
dynsl.py:218 - Precondition at location 46:
dynsl.py:227 - (exists fv0. tseg(p, fv0) * tree(n) & True)
dynsl.py:227 - (exists fv0. tseg(p, fv0) * tseg(n, nil) & True)
dynsl.py:229 - Corresponding postconditions:
dynsl.py:234 - Postconditions at location 40:
dynsl.py:239 - tseg(node, nil) & True
dynsl.py:239 - tree(node) & True
dynsl.py:234 - Postconditions at location 65:
dynsl.py:239 - tseg(p, n) * tseg(n, nil) & True
dynsl.py:239 - tseg(p, n) * tree(n) & True
dynsl.py:234 - Postconditions at location 122:
dynsl.py:239 - (exists fv0. tseg(node, fv0) & True)
dynsl.py:234 - Postconditions at location 81:
dynsl.py:239 - tseg(node, n) * n:node->node{nodeLeft, nodeLeft, node, fv0} & n=res & nodeLeft=nil
dynsl.py:239 - tseg(node, n) * tseg(n, nodeLeft) & n=res & nodeLeft=nil
dynsl.py:239 - tseg(node, n) * tseg(n, nil) & n=res & nodeLeft=nil
dynsl.py:239 - tseg(node, n) * tree(n) & n=res & nodeLeft=nil
dynsl.py:217 - ==============================
dynsl.py:218 - Precondition at location 110:
dynsl.py:227 - tseg(node, nil) & True
dynsl.py:227 - tree(node) & True
dynsl.py:229 - Corresponding postconditions:
dynsl.py:234 - Postconditions at location 40:
dynsl.py:239 - tseg(node, nil) & True
dynsl.py:239 - tree(node) & True
dynsl.py:234 - Postconditions at location 65:
dynsl.py:239 - tseg(p, n) * tseg(n, nil) & True
dynsl.py:239 - tseg(p, n) * tree(n) & True
dynsl.py:234 - Postconditions at location 23:
dynsl.py:239 - n:node->node{p, p, p, fv0} & p=nil & n=res
dynsl.py:239 - tseg(n, nil) & p=nil & n=res
dynsl.py:239 - root(n) & p=nil & n=res
dynsl.py:239 - tree(n) & p=nil & n=res
dynsl.py:239 - tseg(n, p) & p=nil & n=res
dynsl.py:234 - Postconditions at location 96:
dynsl.py:239 - tseg(node, n) * n:node->node{nodeRight, nodeRight, node, fv0} & nodeRight=fv0 & nodeRight=nil & fv0=nil & n=res
dynsl.py:239 - tseg(node, n) * tree(n) & nodeRight=nil & n=res
dynsl.py:239 - tseg(node, n) * tseg(n, nil) & nodeRight=nil & n=res
dynsl.py:239 - tseg(node, n) * n:node->node{nodeRight, nodeRight, node, fv0} & fv0=nodeRight & fv0=nil & nodeRight=nil & n=res
dynsl.py:239 - tseg(node, n) * tseg(n, nodeRight) & nodeRight=nil & n=res
dynsl.py:234 - Postconditions at location 31:
dynsl.py:239 - tree(n) & n=res
dynsl.py:239 - root(n) & n=res
dynsl.py:239 - tseg(n, nil) & n=res
dynsl.py:239 - n:node->node{nil, nil, nil, fv0} & n=res
dynsl.py:217 - ==============================
dynsl.py:218 - Precondition at location 88:
dynsl.py:227 - tseg(node, nil) & True
dynsl.py:227 - tree(node) & True
dynsl.py:229 - Corresponding postconditions:
dynsl.py:234 - Postconditions at location 40:
dynsl.py:239 - tseg(node, nil) & True
dynsl.py:239 - tree(node) & True
dynsl.py:234 - Postconditions at location 65:
dynsl.py:239 - tseg(p, n) * tseg(n, nil) & True
dynsl.py:239 - tseg(p, n) * tree(n) & True
dynsl.py:234 - Postconditions at location 96:
dynsl.py:239 - tseg(node, n) * n:node->node{nodeRight, nodeRight, node, fv0} & nodeRight=fv0 & nodeRight=nil & fv0=nil & n=res
dynsl.py:239 - tseg(node, n) * tree(n) & nodeRight=nil & n=res
dynsl.py:239 - tseg(node, n) * tseg(n, nil) & nodeRight=nil & n=res
dynsl.py:239 - tseg(node, n) * n:node->node{nodeRight, nodeRight, node, fv0} & fv0=nodeRight & fv0=nil & nodeRight=nil & n=res
dynsl.py:239 - tseg(node, n) * tseg(n, nodeRight) & nodeRight=nil & n=res
dynsl.py:217 - ==============================
dynsl.py:218 - Precondition at location 127:
dynsl.py:227 - root(node) & True
dynsl.py:227 - tree(node) & True
dynsl.py:227 - tseg(node, nil) & True
dynsl.py:229 - Corresponding postconditions:
dynsl.py:234 - Postconditions at location 40:
dynsl.py:239 - tseg(node, nil) & True
dynsl.py:239 - tree(node) & True
dynsl.py:257 - ==============================
dynsl.py:280 - Number of locations: 13
dynsl.py:281 - Number of traces: 158
dynsl.py:282 - Number of pre-defined predicates: 3
dynsl.py:283 - Number of inferred assertions: 55
dynsl.py:284 - Number of free variables: 107
dynsl.py:285 - Number of atomic singleton predicates: 11
dynsl.py:286 - Number of atomic inductive predicates: 41
dynsl.py:287 - Number of pure constraints: 52
dynsl.py:288 - Number of total invs: 218
dynsl.py:289 - Number of pres:13
dynsl.py:290 - Number of post:49
dynsl.py:291 - Number of loop:0
dynsl.py:292 - Running time (sec): 372.956727982
../simple_example_update/cyclist/composite4/composite4,13,158,55,107,11,41,52,218,13,49,0,372.
