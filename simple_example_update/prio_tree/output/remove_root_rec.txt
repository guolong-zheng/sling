dynsl.py:221 - Inferring pre-conditions at the location 10 ...

dynsl.py:221 - Inferring post-conditions at the location 36 ...

dynsl.py:221 - Inferring post-conditions at the location 23 ...

dynsl.py:299 - Precondition at location 10:
dynsl.py:307 - tree(x) 
dynsl.py:309 - ==============================
dynsl.py:312 - Postcondition at location 36:
dynsl.py:320 - tmp:b_node->b_node{left_left, nil, fv3, fv2} * right:b_node->b_node{tmp, right_right, fv1, fv0} * tree(right_right) * tree(left_left) * tree(x)  & right_left = nil & right = res
dynsl.py:320 - tmp:b_node->b_node{left_left, nil, fv5, fv4} * right:b_node->b_node{tmp, right_right, fv3, fv2} * tree(right_right) * tree(left_left) * x:b_node->b_node{nil, nil, fv1, fv0}  & right_left = nil & right = res
dynsl.py:312 - Postcondition at location 23:
dynsl.py:320 - tree(x) * tree(left) 
dynsl.py:320 - x:b_node->b_node{nil, nil, fv1, fv0} * tree(left) 
dynsl.py:322 - ==============================
dynsl.py:338 - ==============================
dynsl.py:363 - Number of locations: 3
dynsl.py:364 - Number of traces: 4
dynsl.py:365 - Number of pre-defined predicates: 1
dynsl.py:367 - Number of free variables: 12
dynsl.py:368 - Number of atomic singleton predicates: 6
dynsl.py:369 - Number of atomic inductive predicates: 9
dynsl.py:370 - Number of pure constraints: 4
dynsl.py:371 - Number of total invs: 5
dynsl.py:372 - Number of pres:1
dynsl.py:373 - Number of post:4
dynsl.py:374 - Number of loop:0
dynsl.py:375 - Running time (sec): 864.637281895
../simple_example_update/prio_tree/remove_root_rec,3,4,12,6,9,4,5,1,4,0,864.
../simple_example_update/prio_tree/remove_root_rec,3,4,6,9,4,5,1,4,0,864.
