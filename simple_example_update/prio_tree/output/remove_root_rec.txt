dynsl.py:201 - Inferring pre-conditions at the location 10 ...

dynsl.py:201 - Inferring post-conditions at the location 36 ...

dynsl.py:201 - Inferring post-conditions at the location 23 ...

dynsl.py:251 - ==============================
dynsl.py:252 - Precondition at location 10:
dynsl.py:261 - tree(x) 
dynsl.py:268 - Postconditions at location 36:
dynsl.py:273 - tmp:b_node->b_node{left_left, right_left, fv5, fv4} * right:b_node->b_node{tmp, right_right, fv3, fv2} * tree(right_right) * tree(left_left) * x:b_node->b_node{right_left, right_left, fv1, fv0} 
dynsl.py:273 - tmp:b_node->b_node{left_left, right_left, fv3, fv2} * right:b_node->b_node{tmp, right_right, fv1, fv0} * tree(right_right) * tree(left_left) * tree(x) 
dynsl.py:268 - Postconditions at location 23:
dynsl.py:273 - x:b_node->b_node{nil, nil, fv1, fv0} * tree(left) 
dynsl.py:273 - tree(x) * tree(left) 
dynsl.py:292 - ==============================
dynsl.py:315 - Number of locations: 3
dynsl.py:316 - Number of traces: 4
dynsl.py:317 - Number of pre-defined predicates: 1
dynsl.py:319 - Number of free variables: 37
dynsl.py:320 - Number of atomic singleton predicates: 6
dynsl.py:321 - Number of atomic inductive predicates: 9
dynsl.py:322 - Number of pure constraints: 12
dynsl.py:323 - Number of total invs: 5
dynsl.py:324 - Number of pres:1
dynsl.py:325 - Number of post:4
dynsl.py:326 - Number of loop:0
dynsl.py:327 - Running time (sec): 854.208234072
../simple_example_update/prio_tree/remove_root_rec,3,4,37,6,9,12,5,1,4,0,854.
