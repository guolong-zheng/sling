dynsl.py:221 - Inferring pre-conditions at the location 10 ...

dynsl.py:221 - Inferring post-conditions at the location 36 ...

dynsl.py:221 - Inferring post-conditions at the location 23 ...

dynsl.py:271 - ==============================
dynsl.py:272 - Precondition at location 10:
dynsl.py:281 - tree(x) 
dynsl.py:288 - Postconditions at location 36:
dynsl.py:293 - tmp:b_node->b_node{left_left, nil, fv5, fv4} * right:b_node->b_node{tmp, right_right, fv3, fv2} * tree(right_right) * tree(left_left) * x:b_node->b_node{nil, nil, fv1, fv0}  & right_left = nil & right = res
dynsl.py:293 - tmp:b_node->b_node{left_left, nil, fv3, fv2} * right:b_node->b_node{tmp, right_right, fv1, fv0} * tree(right_right) * tree(left_left) * tree(x)  & right_left = nil & right = res
dynsl.py:288 - Postconditions at location 23:
dynsl.py:293 - x:b_node->b_node{nil, nil, fv1, fv0} * tree(left) 
dynsl.py:293 - tree(x) * tree(left) 
dynsl.py:312 - ==============================
dynsl.py:336 - Number of locations: 3
dynsl.py:337 - Number of traces: 4
dynsl.py:338 - Number of pre-defined predicates: 1
dynsl.py:340 - Number of free variables: 12
dynsl.py:341 - Number of atomic singleton predicates: 6
dynsl.py:342 - Number of atomic inductive predicates: 9
dynsl.py:343 - Number of pure constraints: 4
dynsl.py:344 - Number of total invs: 5
dynsl.py:345 - Number of pres:1
dynsl.py:346 - Number of post:4
dynsl.py:347 - Number of loop:0
dynsl.py:348 - Running time (sec): 852.358236074
../simple_example_update/prio_tree/remove_root_rec,3,4,12,6,9,4,5,1,4,0,852.
