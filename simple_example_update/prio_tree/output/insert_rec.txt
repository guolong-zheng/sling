dynsl.py:221 - Inferring post-conditions at the location 39 ...

dynsl.py:221 - Inferring pre-conditions at the location 8 ...

dynsl.py:221 - Inferring post-conditions at the location 45 ...

dynsl.py:221 - Inferring post-conditions at the location 15 ...

dynsl.py:221 - Inferring post-conditions at the location 24 ...

dynsl.py:221 - Inferring post-conditions at the location 30 ...

dynsl.py:299 - Precondition at location 8:
dynsl.py:307 - tree(x) 
dynsl.py:309 - ==============================
dynsl.py:312 - Postcondition at location 24:
dynsl.py:320 - tree(xr) * x:b_node->b_node{tmp, xr, fv1, fv0} * tree(xl) 
dynsl.py:312 - Postcondition at location 39:
dynsl.py:320 - tree(xr) * x:b_node->b_node{xl, tmp, fv1, fv0} * tree(xl) 
dynsl.py:312 - Postcondition at location 45:
dynsl.py:320 - tree(xr) * x:b_node->b_node{nil, xr, fv3, fv2} * tmp:b_node->b_node{x, nil, fv1, fv0}  & xl = nil & tmp = res
dynsl.py:312 - Postcondition at location 30:
dynsl.py:320 - tree(xr) * x:b_node->b_node{lr, xr, fv3, fv2} * tmp:b_node->b_node{lr, x, fv1, fv0}  & xl = nil & tmp = res
dynsl.py:312 - Postcondition at location 15:
dynsl.py:320 - tree(leaf)  & x = nil
dynsl.py:320 - leaf:b_node->b_node{nil, nil, fv1, fv0}  & x = nil
dynsl.py:320 - leaf:b_node->b_node{x, x, fv1, fv0}  & leaf = res
dynsl.py:322 - ==============================
dynsl.py:338 - ==============================
dynsl.py:363 - Number of locations: 6
dynsl.py:364 - Number of traces: 30
dynsl.py:365 - Number of pre-defined predicates: 1
dynsl.py:367 - Number of free variables: 16
dynsl.py:368 - Number of atomic singleton predicates: 8
dynsl.py:369 - Number of atomic inductive predicates: 8
dynsl.py:370 - Number of pure constraints: 7
dynsl.py:371 - Number of total invs: 8
dynsl.py:372 - Number of pres:1
dynsl.py:373 - Number of post:7
dynsl.py:374 - Number of loop:0
dynsl.py:375 - Running time (sec): 30.6038448811
../simple_example_update/prio_tree/insert_rec,6,30,16,8,8,7,8,1,7,0,30.6
../simple_example_update/prio_tree/insert_rec,6,30,8,8,7,8,1,7,0,30.6
