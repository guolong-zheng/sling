dynsl.py:144 - Inferring post-conditions at the location 24 ...

dynsl.py:144 - Inferring inv-conditions at the location 15 ...

dynsl.py:144 - Inferring pre-conditions at the location 7 ...

dynsl.py:194 - ==============================
dynsl.py:195 - Precondition at location 7:
dynsl.py:202 - tseg(p, nil) & True
dynsl.py:202 - tree(p) & True
dynsl.py:204 - Corresponding postconditions:
dynsl.py:208 - Postconditions at location 24:
dynsl.py:213 - p=nil
dynsl.py:220 - Invariants at location 15:
dynsl.py:227 - (exists fv!711. tree(pR) * p:t_node->t_node{pL, pR, fv!529} * tseg(pL, fv!711) & True)
dynsl.py:227 - (exists fv!1141. tree(pR) * p:t_node->t_node{pL, pR, fv!563} * tseg(pL, fv!1141) & True)
dynsl.py:227 - (exists fv!1675. tseg(pR, nil) * p:t_node->t_node{pL, pR, fv!1493} * tseg(pL, fv!1675) & True)
dynsl.py:227 - (exists fv!2105. tseg(pR, nil) * p:t_node->t_node{pL, pR, fv!1527} * tseg(pL, fv!2105) & True)
dynsl.py:231 - ==============================
dynsl.py:254 - Number of locations: 3
dynsl.py:255 - Number of traces: 52
dynsl.py:256 - Number of pre-defined predicates: 2
dynsl.py:258 - Number of free variables: 19
dynsl.py:259 - Number of atomic singleton predicates: 4
dynsl.py:260 - Number of atomic inductive predicates: 10
dynsl.py:261 - Number of pure constraints: 1
dynsl.py:262 - Number of total invs: 7
dynsl.py:263 - Number of pres:2
dynsl.py:264 - Number of post:1
dynsl.py:265 - Number of loop:4
dynsl.py:266 - Running time (sec): 80.2275280952
../simple_example_update/tree_traversals//test,3,52,7,19,4,10,1,7,2,1,4,80.2
