dynsl.py:221 - Inferring post-conditions at the location 40 ...

dynsl.py:221 - Inferring pre-conditions at the location 9 ...

dynsl.py:221 - Inferring inv-conditions at the location 28 ...

dynsl.py:299 - Precondition at location 9:
dynsl.py:307 - ls(l, nil) 
dynsl.py:307 - ll(l) 
dynsl.py:309 - ==============================
dynsl.py:312 - Postcondition at location 40:
dynsl.py:320 - ls(l, nil) * ls(ret, l) 
dynsl.py:320 - ll(l) * ls(ret, l) 
dynsl.py:322 - ==============================
dynsl.py:326 - Invariants at location 28:
dynsl.py:334 - ls(prev, next) * ls(curr, nil) * ls(l, prev) * ls(ret, l) * ls(next, nil) 
dynsl.py:334 - ls(prev, next) * ls(curr, nil) * ls(l, prev) * ls(ret, l) * ll(next) 
dynsl.py:334 - ls(prev, next) * ls(curr, nil) * ls(l, prev) * ret:node->node{fv0, l} * ls(next, nil) 
dynsl.py:334 - ls(prev, next) * ls(curr, nil) * ls(l, prev) * ret:node->node{fv0, l} * ll(next) 
dynsl.py:334 - ls(prev, next) * ll(curr) * ls(l, prev) * ls(ret, l) * ls(next, nil) 
dynsl.py:334 - ls(prev, next) * ll(curr) * ls(l, prev) * ls(ret, l) * ll(next) 
dynsl.py:334 - ls(prev, next) * ll(curr) * ls(l, prev) * ret:node->node{fv0, l} * ls(next, nil) 
dynsl.py:334 - ls(prev, next) * ll(curr) * ls(l, prev) * ret:node->node{fv0, l} * ll(next) 
dynsl.py:334 - prev:node->node{fv0, next} * ls(curr, nil) * ls(l, prev) * ls(ret, l) * ls(next, nil) 
dynsl.py:334 - prev:node->node{fv0, next} * ls(curr, nil) * ls(l, prev) * ls(ret, l) * ll(next) 
dynsl.py:334 - prev:node->node{fv1, next} * ls(curr, nil) * ls(l, prev) * ret:node->node{fv0, l} * ls(next, nil) 
dynsl.py:334 - prev:node->node{fv1, next} * ls(curr, nil) * ls(l, prev) * ret:node->node{fv0, l} * ll(next) 
dynsl.py:334 - prev:node->node{fv0, next} * ll(curr) * ls(l, prev) * ls(ret, l) * ls(next, nil) 
dynsl.py:334 - prev:node->node{fv0, next} * ll(curr) * ls(l, prev) * ls(ret, l) * ll(next) 
dynsl.py:334 - prev:node->node{fv1, next} * ll(curr) * ls(l, prev) * ret:node->node{fv0, l} * ls(next, nil) 
dynsl.py:334 - prev:node->node{fv1, next} * ll(curr) * ls(l, prev) * ret:node->node{fv0, l} * ll(next) 
dynsl.py:338 - ==============================
dynsl.py:363 - Number of locations: 3
dynsl.py:364 - Number of traces: 15
dynsl.py:365 - Number of pre-defined predicates: 2
dynsl.py:367 - Number of free variables: 16
dynsl.py:368 - Number of atomic singleton predicates: 16
dynsl.py:369 - Number of atomic inductive predicates: 70
dynsl.py:370 - Number of pure constraints: 0
dynsl.py:371 - Number of total invs: 20
dynsl.py:372 - Number of pres:2
dynsl.py:373 - Number of post:2
dynsl.py:374 - Number of loop:16
dynsl.py:375 - Running time (sec): 28.2806460857
../simple_example_update/sortlist/sorted_insert_iter,3,15,16,16,70,0,20,2,2,16,28.2
../simple_example_update/sortlist/sorted_insert_iter,3,15,16,70,0,20,2,2,16,28.2
