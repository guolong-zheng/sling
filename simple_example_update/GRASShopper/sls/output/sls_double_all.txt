dynsl.py:201 - Inferring pre-conditions at the location 8 ...

dynsl.py:201 - Inferring post-conditions at the location 32 ...

dynsl.py:201 - Inferring post-conditions at the location 10 ...

dynsl.py:201 - Inferring inv-conditions at the location 23 ...

dynsl.py:251 - ==============================
dynsl.py:252 - Precondition at location 8:
dynsl.py:261 - ls(lst, nil) 
dynsl.py:268 - Postconditions at location 32:
dynsl.py:273 - ls(res, old_cp) * ls(lst, curr) * ls(cp, nil) * curr:node->node{fv0, nil} * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * ls(lst, curr) * cp:node->node{fv1, nil} * ls(curr, nil) * old_cp:node->node{fv0, cp} 
dynsl.py:273 - ls(res, old_cp) * ls(lst, curr) * ls(cp, nil) * ls(curr, nil) * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * ls(lst, curr) * ls(cp, nil) * curr:node->node{fv1, nil} * old_cp:node->node{fv0, cp} 
dynsl.py:273 - ls(res, old_cp) * ls(lst, curr) * cp:node->node{fv0, nil} * ls(curr, nil) * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * ls(lst, curr) * cp:node->node{fv1, nil} * curr:node->node{fv0, nil} * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * ls(lst, curr) * ls(cp, nil) * ls(curr, nil) * old_cp:node->node{fv0, cp} 
dynsl.py:273 - ls(res, old_cp) * ls(lst, curr) * cp:node->node{fv2, nil} * curr:node->node{fv1, nil} * old_cp:node->node{fv0, cp} 
dynsl.py:268 - Postconditions at location 10:
dynsl.py:273 - ls(res, old_cp) * ls(cp, lst) * ls(curr, nil) * old_cp:node->node{fv0, cp} 
dynsl.py:273 - ls(res, old_cp) * ls(cp, nil) * curr:node->node{fv1, lst} * old_cp:node->node{fv0, cp} 
dynsl.py:273 - ls(res, old_cp) * ls(cp, lst) * ls(curr, lst) * old_cp:node->node{fv0, cp} 
dynsl.py:273 - ls(res, old_cp) * cp:node->node{fv1, lst} * ls(curr, lst) * old_cp:node->node{fv0, cp} 
dynsl.py:273 - ls(res, old_cp) * ls(cp, lst) * ls(curr, nil) * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * ls(cp, lst) * curr:node->node{fv1, lst} * old_cp:node->node{fv0, cp} 
dynsl.py:273 - ls(res, old_cp) * ls(cp, nil) * ls(curr, lst) * old_cp:node->node{fv0, cp} 
dynsl.py:273 - ls(res, old_cp) * ls(cp, lst) * curr:node->node{fv0, lst} * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * cp:node->node{fv0, lst} * ls(curr, nil) * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * ls(cp, nil) * ls(curr, nil) * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * ls(cp, nil) * ls(curr, nil) * old_cp:node->node{fv0, cp} 
dynsl.py:273 - ls(res, old_cp) * cp:node->node{fv1, lst} * ls(curr, nil) * old_cp:node->node{fv0, cp} 
dynsl.py:273 - ls(res, old_cp) * ls(cp, lst) * ls(curr, lst) * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * ls(cp, nil) * curr:node->node{fv0, lst} * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * ls(cp, nil) * ls(curr, lst) * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * cp:node->node{fv1, lst} * curr:node->node{fv0, lst} * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * cp:node->node{fv0, lst} * ls(curr, lst) * ls(old_cp, cp) 
dynsl.py:273 - ls(res, old_cp) * cp:node->node{fv2, lst} * curr:node->node{fv1, lst} * old_cp:node->node{fv0, cp} 
dynsl.py:280 - Invariants at location 23:
dynsl.py:288 -  ls(res, old_cp) * ls(lst, curr) * ls(cp, fv1) * ls(curr, nil) * ls(old_cp, fv0) 
dynsl.py:292 - ==============================
dynsl.py:315 - Number of locations: 4
dynsl.py:316 - Number of traces: 13
dynsl.py:317 - Number of pre-defined predicates: 1
dynsl.py:319 - Number of free variables: 169
dynsl.py:320 - Number of atomic singleton predicates: 33
dynsl.py:321 - Number of atomic inductive predicates: 85
dynsl.py:322 - Number of pure constraints: 116
dynsl.py:323 - Number of total invs: 28
dynsl.py:324 - Number of pres:1
dynsl.py:325 - Number of post:26
dynsl.py:326 - Number of loop:1
dynsl.py:327 - Running time (sec): 17.8993370533
../simple_example_update/GRASShopper/sls/sls_double_all,4,13,169,33,85,116,28,1,26,1,17.8
