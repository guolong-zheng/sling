dynsl.py:221 - Inferring pre-conditions at the location 8 ...

dynsl.py:221 - Inferring post-conditions at the location 33 ...

dynsl.py:221 - Inferring post-conditions at the location 10 ...

dynsl.py:221 - Inferring inv-conditions at the location 22 ...

dynsl.py:271 - ==============================
dynsl.py:272 - Precondition at location 8:
dynsl.py:281 - ls(y, nil) * ls(x, nil) 
dynsl.py:288 - Postconditions at location 33:
dynsl.py:293 - last_z:node->node{fv0, nil} * ls(curr_y, nil) * ls(curr_x, nil) * ls(y, curr_y) * ls(x, curr_x) * ls(z, last_z) 
dynsl.py:293 - ls(last_z, nil) * ls(curr_y, nil) * curr_x:node->node{fv0, nil} * ls(y, curr_y) * ls(x, curr_x) * ls(z, last_z) 
dynsl.py:293 - ls(last_z, nil) * ls(curr_y, nil) * ls(curr_x, nil) * ls(y, curr_y) * ls(x, curr_x) * ls(z, last_z) 
dynsl.py:293 - ls(last_z, nil) * curr_y:node->node{fv0, nil} * ls(curr_x, nil) * ls(y, curr_y) * ls(x, curr_x) * ls(z, last_z) 
dynsl.py:293 - last_z:node->node{fv1, nil} * curr_y:node->node{fv0, nil} * ls(curr_x, nil) * ls(y, curr_y) * ls(x, curr_x) * ls(z, last_z) 
dynsl.py:293 - last_z:node->node{fv2, nil} * curr_y:node->node{fv1, nil} * curr_x:node->node{fv0, nil} * ls(y, curr_y) * ls(x, curr_x) * ls(z, last_z) 
dynsl.py:293 - last_z:node->node{fv1, nil} * ls(curr_y, nil) * curr_x:node->node{fv0, nil} * ls(y, curr_y) * ls(x, curr_x) * ls(z, last_z) 
dynsl.py:293 - ls(last_z, nil) * curr_y:node->node{fv1, nil} * curr_x:node->node{fv0, nil} * ls(y, curr_y) * ls(x, curr_x) * ls(z, last_z) 
dynsl.py:288 - Postconditions at location 10:
dynsl.py:293 -  last_z:node->node{fv5, fv4} * curr_y:node->node{fv3, fv2} * ls(curr_x, nil) * ls(y, fv1) * ls(x, fv0) * ls(z, last_z)  & res = nil
dynsl.py:293 -  ls(last_z, nil) * ls(curr_y, nil) * curr_x:node->node{fv3, fv2} * ls(y, fv1) * ls(x, fv0) * ls(z, last_z)  & res = nil
dynsl.py:293 -  last_z:node->node{fv7, fv6} * curr_y:node->node{fv5, fv4} * curr_x:node->node{fv3, fv2} * ls(y, fv1) * ls(x, fv0) * ls(z, last_z)  & res = nil
dynsl.py:293 -  last_z:node->node{fv3, fv2} * ls(curr_y, nil) * ls(curr_x, nil) * ls(y, fv1) * ls(x, fv0) * ls(z, last_z)  & res = nil
dynsl.py:293 -  last_z:node->node{fv5, fv4} * ls(curr_y, nil) * curr_x:node->node{fv3, fv2} * ls(y, fv1) * ls(x, fv0) * ls(z, last_z)  & res = nil
dynsl.py:293 -  ls(last_z, nil) * curr_y:node->node{fv3, fv2} * ls(curr_x, nil) * ls(y, fv1) * ls(x, fv0) * ls(z, last_z)  & res = nil
dynsl.py:293 -  ls(last_z, nil) * ls(curr_y, nil) * ls(curr_x, nil) * ls(y, fv1) * ls(x, fv0) * ls(z, last_z)  & res = nil
dynsl.py:293 -  ls(last_z, nil) * curr_y:node->node{fv5, fv4} * curr_x:node->node{fv3, fv2} * ls(y, fv1) * ls(x, fv0) * ls(z, last_z)  & res = nil
dynsl.py:300 - Invariants at location 22:
dynsl.py:308 -  ls(tmp, fv2) * ls(last_z, nil) * ls(curr_y, fv1) * ls(curr_x, nil) * ls(y, curr_y) * ls(x, curr_x) * ls(z, fv0) 
dynsl.py:308 -  ls(tmp, fv3) * last_z:node->node{fv2, nil} * ls(curr_y, fv1) * ls(curr_x, nil) * ls(y, curr_y) * ls(x, curr_x) * ls(z, fv0) 
dynsl.py:308 -  tmp:node->node{fv3, fv2} * ls(last_z, nil) * ls(curr_y, fv1) * ls(curr_x, nil) * ls(y, curr_y) * ls(x, curr_x) * ls(z, fv0) 
dynsl.py:308 -  tmp:node->node{fv4, fv3} * last_z:node->node{fv2, nil} * ls(curr_y, fv1) * ls(curr_x, nil) * ls(y, curr_y) * ls(x, curr_x) * ls(z, fv0) 
dynsl.py:312 - ==============================
dynsl.py:336 - Number of locations: 4
dynsl.py:337 - Number of traces: 17
dynsl.py:338 - Number of pre-defined predicates: 1
dynsl.py:340 - Number of free variables: 68
dynsl.py:341 - Number of atomic singleton predicates: 28
dynsl.py:342 - Number of atomic inductive predicates: 98
dynsl.py:343 - Number of pure constraints: 8
dynsl.py:344 - Number of total invs: 21
dynsl.py:345 - Number of pres:1
dynsl.py:346 - Number of post:16
dynsl.py:347 - Number of loop:4
dynsl.py:348 - Running time (sec): 52.9102330208
../simple_example_update/GRASShopper/sls/sls_pairwise_sum,4,17,68,28,98,8,21,1,16,4,52.9
