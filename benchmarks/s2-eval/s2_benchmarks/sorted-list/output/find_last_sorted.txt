
!!!Full processing file "sorted-list//find_last_sorted.dryad.c"
Parsing file "sorted-list//find_last_sorted.dryad.c" by cil parser...
GCC Preprocessing...
gcc -C -E sorted-list//find_last_sorted.dryad.c -o sorted-list//find_last_sorted.dryad.c.prep

!!! generate unknown predicate for Pre synthesis of find_last_sorted: :HP_22
!!! generate unknown predicate for Post synthesis of find_last_sorted: :GP_23
!!! ss:EInfer @shape[HP_22,GP_23] EBase: [][](HRel HP_22(l))*(true)( FLOW __norm) {EAssume: 9,:(HRel GP_23(l,res))*(true)( FLOW __norm)}
!!! processing primitives "["prelude.ss"]
Starting z3... 

!!! generate unknown predicate for Pre synthesis of while_14_3$node: :HP_1342
!!! generate unknown predicate for Post synthesis of while_14_3$node: :GP_1344Starting Omega.../usr/local/bin/oc

Checking procedure while_14_3$node... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[@shape HP_1342,GP_1344]requires HP_1342(curr_63)&
truerequires emp
 ensures GP_1344(curr_63,curr_63')&true{,(4,5)=__norm#E};

*************************************
*******shape relational assumptions ********
*************************************
[ // BIND
(1;0)HP_1342(curr_63)&true --> curr_63::node<key_14_1391,next_14_1392> * 
HP_1393(next_14_1392)&
true,
 // PRE_REC
(1;1;0)HP_1393(curr_63')&curr_63'!=null --> HP_1342(curr_63')&
true,
 // POST
(1;1;0)curr_63::node<key_14_1391,next_14_1392> * 
GP_1344(next_14_1392,curr_63')&
next_14_1392!=null --> GP_1344(curr_63,curr_63')&
true,
 // POST
(2;1;0)HP_1393(next_14_1392) * curr_63::node<key_14_1391,next_14_1392>&
next_14_1392=null & curr_63'=curr_63 --> GP_1344(curr_63,curr_63')&
true]

Procedure while_14_3$node SUCCESS.

*********************************************************
*******relational definition ********
*********************************************************
[ HP_1342(curr_1407) ::= curr_1407::node<key_14_1391,next_14_1392> * HP_1393(next_14_1392)&
curr_1407!=null(4,5),
 GP_1344(curr_1410,curr_1411) ::= curr_1412::node<key_14_1391,next_14_1392> * GP_1413(curr_1410,curr_1412)&
next_14_1392=null & curr_1411=curr_1412(4,5),
 GP_1413(curr_1410,curr_1412) ::= 
 curr_1410::node<key_14_1391,next_14_1392> * GP_1413(next_14_1392,curr_1412)&
 next_14_1392!=null
 or emp&curr_1410=curr_1412
 (4,5),
 HP_1393(curr_1409) ::= 
 curr_1409::node<key_14_1391,next_14_1392> * HP_1393(next_14_1392)
 or emp&curr_1409=null
 (4,5)]
*************************************

!!! INFERRED SHAPE SPEC: EBase exists (Expl)[](Impl)[key_14_1391](ex)[]curr_63::node<key_14_1391,next_14_1392> * 
       next_14_1392::HP_1393{}<>&curr_63!=null&{FLOW,(1,31)=__flow#E}[]
         EBase exists (Expl)[](Impl)[key_14_1391](ex)[]emp&MayLoop[]&
               {FLOW,(4,5)=__norm#E}[]
                 EAssume ref [curr_63]
                   (exists next_14_1392,
                   curr_1412: curr_1412::node<key_14_1391,next_14_1392> * 
                   curr_63::GP_1413{}<curr_1412>&next_14_1392=null & 
                   curr_63'=curr_1412&{FLOW,(4,5)=__norm#E})[]
                   
Checking procedure find_last_sorted$node... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[@shape HP_22,GP_23]requires HP_22(l)&
truerequires emp
 ensures GP_23(l,res)&true{,(4,5)=__norm#E};

*************************************
*******shape relational assumptions ********
*************************************
[ // PRE
(1;0)HP_22(curr_63')&
curr_63'!=null --> curr_63'::node<key_14_1484,next_14_1485> * 
HP_1486(next_14_1485)&
true,
 // PRE
(1;0)HP_1486(next_14_1481)&true --> next_14_1481::HP_1393<>&
true,
 // POST
(1;0)res::node<key_14_1391,next_14_1490> * l::GP_1413<res>&
next_14_1490=null --> GP_23(l,res)&
true,
 // POST
(2;0)HP_22(l)&l=null & res=null & res=l --> GP_23(l,res)&
true]

Procedure find_last_sorted$node SUCCESS.
 
 (LEMSYN) Proving lemma syn_1646: curr_1643::node<key_14_1641,next_14_1642> * self::GP_1413{}<curr_1643>&
next_14_1642=null&{FLOW,(1,31)=__flow#E}[] ->  self::GP_1413{}<curr_1643>&{FLOW,(1,31)=__flow#E}[]

Context of Verification Failure: 1 File "",Line:0,Col:0

Last Proving Location: 1 File "",Line:0,Col:0

ERROR: at _0:0_0:0
Message: unexpected match pattern
 
 gen lemma: Exception: Failure("unexpected match pattern")

*********************************************************
*******relational definition ********
*********************************************************
[ HP_22(curr_1495) ::= curr_1495::HP_1393<>(4,5),
 GP_23(l_1496,res_1497) ::= 
 res_1497::node<key_14_1391,next_14_1490> * l_1496::GP_1413<res_1497>&
 next_14_1490=null
 or emp&l_1496=null & res_1497=null
 (4,5),
 GP_1344(curr_1410,curr_1411) ::= curr_1412::node<key_14_1391,next_14_1392> * GP_1413(curr_1410,curr_1412)&
next_14_1392=null & curr_1411=curr_1412(4,5),
 GP_1413(curr_1410,curr_1412) ::= 
 curr_1410::node<key_14_1391,next_14_1392> * GP_1413(next_14_1392,curr_1412)&
 next_14_1392!=null
 or emp&curr_1410=curr_1412
 (4,5),
 HP_1342(curr_1407) ::= curr_1407::node<key_14_1391,next_14_1392> * HP_1393(next_14_1392)&
curr_1407!=null(4,5),
 HP_1393(curr_1409) ::= 
 curr_1409::node<key_14_1391,next_14_1392> * HP_1393(next_14_1392)
 or emp&curr_1409=null
 (4,5)]
*************************************

!!! INFERRED SHAPE SPEC: EBase l::HP_1393{}<>&{FLOW,(4,5)=__norm#E}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                 EAssume 
                   l::GP_23{}<res>&{FLOW,(4,5)=__norm#E}[]
                   Stop z3... 132 invocations Stop Omega... 98 invocations 
1 false contexts at: ( (14,3) )

!!! log(small):(0.080021,767)
Total verification time: 0.168 second(s)
	Time spent in main process: 0.112 second(s)
	Time spent in child processes: 0.056 second(s)
	Z3 Prover Time: 0. second(s)
