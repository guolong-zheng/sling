
!!!Full processing file "cyclist/composite4/tree_add_left.c"
Parsing file "cyclist/composite4/tree_add_left.c" by cil parser...
GCC Preprocessing...
gcc -C -E cyclist/composite4/tree_add_left.c -o cyclist/composite4/tree_add_left.c.prep

!!! generate unknown predicate for Pre synthesis of subtree_get_count: :HP_17
!!! generate unknown predicate for Post synthesis of subtree_get_count: :GP_18
!!! generate unknown predicate for Pre synthesis of fixup_ancestors: :HP_19
!!! generate unknown predicate for Post synthesis of fixup_ancestors: :GP_20
!!! generate unknown predicate for Pre synthesis of tree_add_left: :HP_25
!!! generate unknown predicate for Post synthesis of tree_add_left: :GP_26
!!! ss:EInfer @shape[HP_25,GP_26] EBase: [][](HRel HP_25(node))*(true)( FLOW __norm) {EAssume: 10,:(HRel GP_26(node,res))*(true)( FLOW __norm)}
!!! processing primitives "["prelude.ss"]
Starting z3... 

Checking procedure subtree_get_count$node... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[ HP_17,GP_18]requires HP_17(node)&
truerequires emp
 ensures GP_18(node)&true{,(4,5)=__norm#E};
Starting Omega.../usr/local/bin/oc

*************************************
*******shape relational assumptions ********
*************************************
[ // BIND
(1;0)HP_17(node)&
node!=null --> node::node<left_7_1380,right_7_1381,parent_7_1382,count_7_1383> * 
HP_1384(left_7_1380) * HP_1385(right_7_1381) * HP_1386(parent_7_1382)&
true,
 // POST
(1;0)HP_1384(left_7_1380) * HP_1385(right_7_1381) * HP_1386(parent_7_1382) * 
node::node<left_7_1380,right_7_1381,parent_7_1382,count_7_1383>&
true --> GP_18(node)&
true,
 // POST
(2;0)HP_17(node)&node=null --> GP_18(node)&
true]

Procedure subtree_get_count$node SUCCESS.

*********************************************************
*******relational definition ********
*********************************************************
[ HP_17(node_1389) ::= 
 node_1389::node<DP_DP_HP_1384,DP_DP_HP_1385,DP_DP_HP_1386,count_7_1383>
 or emp&node_1389=null
 (4,5),
 GP_18(node_1390) ::= HP_17(node_1390)(4,5)]
*************************************

!!! INFERRED SHAPE SPEC: EBase node::HP_17{}<>&{FLOW,(4,5)=__norm#E}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                 EAssume 
                   node::HP_17{}<>&{FLOW,(1,29)=__flow#E}[]
                   
Checking procedure fixup_ancestors$node~node~int... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[ HP_1409,GP_20]requires HP_1409(p,n@NI)&
truerequires emp
 ensures GP_20(n,p)&true{,(4,5)=__norm#E};

*************************************
*******shape relational assumptions ********
*************************************
[ // BIND
(2;0)HP_19(n@NI,p)&
p!=null --> p::node<left_17_1416,right_17_1417,parent_17_1418,count_17_1419> * 
HP_1420(left_17_1416,n@NI) * HP_1421(right_17_1417,n@NI) * 
HP_1422(parent_17_1418,n@NI)&
true,
 // PRE
(1;2;0)HP_1421(right_17_1417,left_17_1416@NI)&
n=left_17_1416 --> right_17_1417::HP_17<>&
true,
 // PRE
(2;2;0)HP_1420(left_17_1416,n@NI)&left_17_1416!=n --> left_17_1416::HP_17<>&
true,
 // PRE_REC
(1;2;0)HP_1422(grandparent_53',left_17_1416@NI)&
n=left_17_1416 |#| p'::node<left_17_1416,right_17_1417,grandparent_53',pcount_56'>&
(leftCount_54'=(pcount_56'-rightCount_55')-1 | count=(pcount_56'-
rightCount_55')-1 | count'=(pcount_56'-rightCount_55')-
1) --> HP_19(p'@NI,grandparent_53')&
true,
 // POST
(1;0)HP_19(n@NI,p)&p=null --> GP_20(n,p)&
true,
 // POST
(1;2;0)HP_1420(left_17_1416,n@NI) * right_17_1417::HP_17<> * 
p::node<left_17_1416,right_17_1417,parent_17_1418,pcount_1473> * 
GP_20(p,parent_17_1418)&n=left_17_1416 --> GP_20(left_17_1416,p)&
true,
 // POST
(2;2;0)HP_1421(right_17_1417,n@NI) * left_17_1416::HP_17<> * 
p::node<left_17_1416,right_17_1417,parent_17_1418,pcount_1475> * 
GP_20(p,parent_17_1418)&n!=left_17_1416 --> GP_20(n,p)&
true]

Procedure fixup_ancestors$node~node~int SUCCESS.

*********************************************************
*******relational definition ********
*********************************************************
[ HP_19(n_1610,p_1611) |#| 
                          emp&(leftCount_54'=(count_17_1563-rightCount_55')-
                          1 | count=(count_17_1563-rightCount_55')-1 | 
                          count'=(count_17_1563-rightCount_55')-1)
                          or emp&(leftCount_54'=(count_17_1563-
                             rightCount_55')-1 | count=(count_17_1563-
                             rightCount_55')-1 | count'=(count_17_1563-
                             rightCount_55')-1)
                          or emp&(leftCount_54'=(count_17_1563-
                             rightCount_55')-1 | count=(count_17_1563-
                             rightCount_55')-1 | count'=(count_17_1563-
                             rightCount_55')-1)
                          or emp&n_1610!=left_17_1564 & 
                             ((leftCount_54'=(count_17_1563-rightCount_55')-
                             1 | count=(count_17_1563-rightCount_55')-1 | 
                             count'=(count_17_1563-rightCount_55')-1))
                           ::= 
 HP_19(p_1611,parent_17_1565) * 
 p_1611::node<left_17_1564,DP_DP_DP_1477,parent_17_1565,count_17_1563>&
 n_1610=left_17_1564
 or HP_19(p_1611,parent_17_1565) * 
    p_1611::node<left_17_1564,DP_DP_DP_1477,parent_17_1565,count_17_1563> * 
    left_17_1564::HP_17<>&left_17_1564!=n_1610
 or HP_19(p_1611,parent_17_1565) * 
    p_1611::node<left_17_1564,right_17_1562,parent_17_1565,count_17_1563> * 
    right_17_1562::HP_17<>&n_1610=left_17_1564
 or HP_19(p_1611,parent_17_1565) * 
    p_1611::node<left_17_1564,right_17_1562,parent_17_1565,count_17_1563> * 
    left_17_1564::HP_17<> * right_17_1562::HP_17<>&left_17_1564!=n_1610
 or emp&p_1611=null
 (4,5),
 GP_20(n_1612,p_1613) ::= 
 right_17_1417::HP_17<> * 
 p_1613::node<n_1612,right_17_1417,parent_17_1418,pcount_1473> * 
 GP_20(p_1613,parent_17_1418)
 or left_17_1416::HP_17<> * 
    p_1613::node<left_17_1416,right_17_1417,parent_17_1418,pcount_1475> * 
    GP_20(p_1613,parent_17_1418) * right_17_1417::HP_17<>&
    n_1612!=left_17_1416
 or left_17_1416::HP_17<> * 
    p_1613::node<left_17_1416,DP_DP_DP_1477,parent_17_1418,pcount_1475> * 
    GP_20(p_1613,parent_17_1418)&n_1612!=left_17_1416
 or emp&p_1613=null
 (4,5),
 GP_18(node_1390) ::= HP_17(node_1390)(4,5),
 HP_17(node_1389) ::= 
 node_1389::node<DP_DP_HP_1384,DP_DP_HP_1385,DP_DP_HP_1386,count_7_1383>
 or emp&node_1389=null
 (4,5)]
*************************************

!!! INFERRED SHAPE SPEC: EBase HP_1409(p,n)&{FLOW,(4,5)=__norm#E}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                 EAssume 
                   (exists n: p::GP_20{}<n>&{FLOW,(4,5)=__norm#E})[]
                   
Checking procedure tree_add_left$node... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[@shape HP_25,GP_26]requires HP_25(node)&
truerequires emp
 ensures GP_26(node,res)&true{,(4,5)=__norm#E};

*************************************
*******shape relational assumptions ********
*************************************
[ // BIND
(0)HP_25(node)&
true --> node::node<left_52_1858,right_52_1859,parent_52_1860,count_52_1861> * 
HP_1862(left_52_1858) * HP_1863(right_52_1859) * HP_1864(parent_52_1860)&
true,
 // PRE
(0)n_57'::node<left_50_1855,right_50_1856,node',v_int_50_1857> * 
HP_1863(right_52_1859) * HP_1864(parent_52_1860) * 
node'::node<n_57',right_52_1859,parent_52_1860,count_52_1861>&
left_50_1855=null & right_50_1856=null & 
right_50_1856=left_50_1855 --> HP_1409(node',n_57'@NI)&
true,
 // POST
(0)node::GP_20<n_1878>&res!=null --> GP_26(node,res)&
true]

Procedure tree_add_left$node SUCCESS.
Timeout when checking #simplify  Restarting Omega after ... 142 invocations Stop Omega... 142 invocations Starting Omega.../usr/local/bin/oc
Timeout when checking #simplify  Restarting Omega after ... 144 invocations Stop Omega... 144 invocations Starting Omega.../usr/local/bin/oc
