
!!!Full processing file "GRASShopper//sls/sls_traverse.dryad.c"
Parsing file "GRASShopper//sls/sls_traverse.dryad.c" by cil parser...
GCC Preprocessing...
gcc -C -E GRASShopper//sls/sls_traverse.dryad.c -o GRASShopper//sls/sls_traverse.dryad.c.prep

!!! generate unknown predicate for Pre synthesis of sls_traverse1: :HP_22
!!! generate unknown predicate for Post synthesis of sls_traverse1: :GP_23
!!! ss:EInfer @shape[HP_22,GP_23] EBase: [][](HRel HP_22(lst))*(true)( FLOW __norm) {EAssume: 11,:(HRel GP_23(lst))*(true)( FLOW __norm)}
!!! generate unknown predicate for Pre synthesis of sls_traverse2: :HP_24
!!! generate unknown predicate for Post synthesis of sls_traverse2: :GP_25
!!! ss:EInfer @shape[HP_24,GP_25] EBase: [][](HRel HP_24(lst))*(true)( FLOW __norm) {EAssume: 12,:(HRel GP_25(lst))*(true)( FLOW __norm)}
!!! processing primitives "["prelude.ss"]
Starting z3... 

!!! generate unknown predicate for Pre synthesis of while_13_2$node: :HP_1346
!!! generate unknown predicate for Post synthesis of while_13_2$node: :GP_1348
!!! generate unknown predicate for Pre synthesis of while_34_4$node: :HP_1364
!!! generate unknown predicate for Post synthesis of while_34_4$node: :GP_1366Starting Omega.../usr/local/bin/oc

Checking procedure while_13_2$node... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[@shape HP_1346,GP_1348]requires HP_1346(curr_65)&
truerequires emp
 ensures GP_1348(curr_65,curr_65')&true{,(4,5)=__norm#E};

*************************************
*******shape relational assumptions ********
*************************************
[ // BIND
(1;1;0)HP_1346(curr_65)&
curr_65!=null --> curr_65::node<key_20_1417,next_20_1418> * 
HP_1419(next_20_1418)&
true,
 // PRE_REC
(1;1;0)HP_1419(curr_65')&true --> HP_1346(curr_65')&
true,
 // POST
(1;1;0)curr_65::node<key_20_1417,next_20_1418> * 
GP_1348(next_20_1418,curr_65')&true --> GP_1348(curr_65,curr_65')&
true,
 // POST
(2;1;0)HP_1346(curr_65)&curr_65=null & curr_65'=null & 
curr_65'=curr_65 --> GP_1348(curr_65,curr_65')&
true]

Procedure while_13_2$node SUCCESS.

*********************************************************
*******relational definition ********
*********************************************************
[ HP_1346(curr_1429) ::= 
 HP_1346(next_20_1427) * curr_1429::node<key_20_1426,next_20_1427>
 or emp&curr_1429=null
 (4,5),
 GP_1348(curr_1430,curr_1431) ::= GP_1433(curr_1430,curr_1432)&curr_1431=null & curr_1432=null(4,5),
 GP_1433(curr_1430,curr_1432) ::= 
 curr_1430::node<key_20_1417,next_20_1418> * GP_1433(next_20_1418,curr_1432)
 or emp&curr_1430=curr_1432
 (4,5)]
*************************************

!!! INFERRED SHAPE SPEC: EBase curr_65::HP_1346{}<>&{FLOW,(4,5)=__norm#E}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                 EAssume ref [curr_65]
                   (exists curr_1432: curr_65::GP_1433{}<curr_1432>&
                   curr_65'=null & curr_1432=null&{FLOW,(4,5)=__norm#E})[]
                   
Checking procedure sls_traverse1$node... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[@shape HP_22,GP_23]requires HP_22(lst)&
truerequires emp
 ensures GP_23(lst)&true{,(4,5)=__norm#E};

*************************************
*******shape relational assumptions ********
*************************************
[ // PRE
(0)HP_22(curr_65')&true --> curr_65'::HP_1346<>&
true,
 // POST
(0)lst::GP_1433<curr_1482>&curr_1482=null --> GP_23(lst)&
true]

Procedure sls_traverse1$node SUCCESS.
 
 (LEMSYN) Proving lemma syn_1562: self::GP_1433{}<curr_1561>&curr_1561=null&{FLOW,(1,31)=__flow#E}[] ->  self::HP_1346{}<>&{FLOW,(1,31)=__flow#E}[]

*********************************************************
*******relational definition ********
*********************************************************
[ HP_22(curr_1483) ::= curr_1483::HP_1346<>(4,5),
 GP_23(lst_1484) ::= lst_1484::GP_1433<curr_1482>&curr_1482=null(4,5),
 GP_1348(curr_1430,curr_1431) ::= GP_1433(curr_1430,curr_1432)&curr_1431=null & curr_1432=null(4,5),
 GP_1433(curr_1430,curr_1432) ::= 
 curr_1430::node<key_20_1417,next_20_1418> * GP_1433(next_20_1418,curr_1432)
 or emp&curr_1430=curr_1432
 (4,5),
 HP_1346(curr_1429) ::= 
 HP_1346(next_20_1427) * curr_1429::node<key_20_1426,next_20_1427>
 or emp&curr_1429=null
 (4,5)]
*************************************

!!! INFERRED SHAPE SPEC: EBase lst::HP_1346{}<>&{FLOW,(1,31)=__flow#E}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                 EAssume 
                   (exists curr_1482: lst::GP_1433{}<curr_1482>&
                   curr_1482=null&{FLOW,(4,5)=__norm#E})[]
                   
Checking procedure while_34_4$node... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[@shape HP_1364,GP_1366]requires HP_1364(curr_66)&
truerequires emp
 ensures GP_1366(curr_66,curr_66')&true{,(4,5)=__norm#E};

*************************************
*******shape relational assumptions ********
*************************************
[ // BIND
(1;1;0)HP_1364(curr_66)&
curr_66!=null --> curr_66::node<key_41_1690,next_41_1691> * 
HP_1692(next_41_1691)&
true,
 // PRE_REC
(1;1;0)HP_1692(curr_66')&true --> HP_1364(curr_66')&
true,
 // POST
(1;1;0)curr_66::node<key_41_1690,next_41_1691> * 
GP_1366(next_41_1691,curr_66')&true --> GP_1366(curr_66,curr_66')&
true,
 // POST
(2;1;0)HP_1364(curr_66)&curr_66=null & curr_66'=null & 
curr_66'=curr_66 --> GP_1366(curr_66,curr_66')&
true]

Procedure while_34_4$node SUCCESS.

*********************************************************
*******relational definition ********
*********************************************************
[ HP_1364(curr_1702) ::= curr_1702::HP_1346<>(4,5),
 GP_1366(curr_1703,curr_1704) ::= curr_1703::GP_1433<curr_1705>&curr_1704=null & curr_1705=null(4,5),
 GP_1348(curr_1430,curr_1431) ::= GP_1433(curr_1430,curr_1432)&curr_1431=null & curr_1432=null(4,5),
 GP_1433(curr_1430,curr_1432) ::= 
 curr_1430::node<key_20_1417,next_20_1418> * GP_1433(next_20_1418,curr_1432)
 or emp&curr_1430=curr_1432
 (4,5),
 GP_23(lst_1484) ::= lst_1484::GP_1433<curr_1482>&curr_1482=null(4,5),
 HP_1346(curr_1429) ::= 
 HP_1346(next_20_1427) * curr_1429::node<key_20_1426,next_20_1427>
 or emp&curr_1429=null
 (4,5),
 HP_22(curr_1483) ::= curr_1483::HP_1346<>(4,5)]
*************************************

!!! INFERRED SHAPE SPEC: EBase curr_66::HP_1346{}<>&{FLOW,(4,5)=__norm#E}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                 EAssume ref [curr_66]
                   (exists curr_1705: curr_66::GP_1433{}<curr_1705>&
                   curr_66'=null & curr_1705=null&{FLOW,(4,5)=__norm#E})[]
                   
Checking procedure sls_traverse2$node... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[@shape HP_24,GP_25]requires HP_24(lst)&
truerequires emp
 ensures GP_25(lst)&true{,(4,5)=__norm#E};

*************************************
*******shape relational assumptions ********
*************************************
[ // PRE
(1;0)HP_24(curr_66')&curr_66'!=null --> curr_66'::HP_1346<>&
true,
 // POST
(1;0)lst::GP_1433<curr_2035>&curr_2035=null --> GP_25(lst)&
true,
 // POST
(2;0)HP_24(lst)&lst=null --> GP_25(lst)&
true]

Procedure sls_traverse2$node SUCCESS.
 
 (LEMSYN) Proving lemma syn_2285: self::GP_1433{}<curr_2284>&curr_2284=null&{FLOW,(1,31)=__flow#E}[] ->  self::HP_1364{}<>&{FLOW,(1,31)=__flow#E}[]

*********************************************************
*******relational definition ********
*********************************************************
[ HP_24(curr_2036) ::= curr_2036::HP_1346<>(4,5),
 GP_25(lst_2037) ::= 
 lst_2037::GP_1433<curr_2035>&curr_2035=null
 or emp&lst_2037=null
 (4,5),
 GP_1348(curr_1430,curr_1431) ::= GP_1433(curr_1430,curr_1432)&curr_1431=null & curr_1432=null(4,5),
 GP_1366(curr_1703,curr_1704) ::= curr_1703::GP_1433<curr_1705>&curr_1704=null & curr_1705=null(4,5),
 GP_1433(curr_1430,curr_1432) ::= 
 curr_1430::node<key_20_1417,next_20_1418> * GP_1433(next_20_1418,curr_1432)
 or emp&curr_1430=curr_1432
 (4,5),
 GP_23(lst_1484) ::= lst_1484::GP_1433<curr_1482>&curr_1482=null(4,5),
 HP_1346(curr_1429) ::= 
 HP_1346(next_20_1427) * curr_1429::node<key_20_1426,next_20_1427>
 or emp&curr_1429=null
 (4,5),
 HP_1364(curr_1702) ::= curr_1702::HP_1346<>(4,5),
 HP_22(curr_1483) ::= curr_1483::HP_1346<>(4,5)]
*************************************

!!! INFERRED SHAPE SPEC: EBase lst::HP_1346{}<>&{FLOW,(4,5)=__norm#E}[]
         EBase emp&MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                 EAssume 
                   lst::GP_25{}<>&{FLOW,(4,5)=__norm#E}[]
                   Stop z3... 112 invocations Stop Omega... 178 invocations 
2 false contexts at: ( (34,4)  (13,2) )

!!! log(small):(0.138279,1345)
Total verification time: 0.216 second(s)
	Time spent in main process: 0.152 second(s)
	Time spent in child processes: 0.064 second(s)
	Z3 Prover Time: 0. second(s)
