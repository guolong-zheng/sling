
!!!Full processing file "circular-list//circular-list-delete-back.dryad.c"
Parsing file "circular-list//circular-list-delete-back.dryad.c" by cil parser...
GCC Preprocessing...
gcc -C -E circular-list//circular-list-delete-back.dryad.c -o circular-list//circular-list-delete-back.dryad.c.prep

!!! generate unknown predicate for Pre synthesis of lseg_delete_back: :HP_22
!!! generate unknown predicate for Post synthesis of lseg_delete_back: :GP_23
!!! ss:EInfer @shape[HP_22,GP_23] EBase: [][](HRel HP_22(hd,tl))*(true)( FLOW __norm) {EAssume: 9,:(HRel GP_23(hd,tl,res))*(true)( FLOW __norm)}
!!! generate unknown predicate for Pre synthesis of circular_list_delete_back: :HP_26
!!! generate unknown predicate for Post synthesis of circular_list_delete_back: :GP_27
!!! ss:EInfer @shape[HP_26,GP_27] EBase: [][](HRel HP_26(x))*(true)( FLOW __norm) {EAssume: 12,:(HRel GP_27(x,res))*(true)( FLOW __norm)}
!!! processing primitives "["prelude.ss"]
Starting z3... 
Starting Omega.../usr/local/bin/oc

Checking procedure lseg_delete_back$node~node... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[@shape HP_22,GP_23]requires HP_22(hd,tl@NI)&
truerequires emp
 ensures GP_23(hd,tl,res)&true{,(4,5)=__norm#E};

*************************************
*******shape relational assumptions ********
*************************************
[ // BIND
(0)HP_22(hd,tl@NI)&true --> hd::node<key_12_1434,next_12_1435> * 
HP_1436(next_12_1435,tl@NI)&
true,
 // PRE_REC
(2;2;0)HP_1436(next_12_1435,tl@NI)&next_12_1435!=null & 
tl!=next_12_1435 --> HP_22(next_12_1435,tl@NI)&
true,
 // POST
(1;0)HP_1436(next_12_1435,tl@NI) * hd::node<key_12_1434,next_12_1435>&
next_12_1435=null --> GP_23(hd,tl,next_12_1435)&
true,
 // POST
(2;2;0)GP_23(next_20_1462,tl,hd_1463) * hd::node<key_12_1434,hd_1463>&
tl!=next_20_1462 & next_20_1462!=null & res=hd --> GP_23(hd,tl,res)&
true]

Procedure lseg_delete_back$node~node SUCCESS.

*********************************************************
*******relational definition ********
*********************************************************
[ HP_22(hd_1464,tl_1465) ::= hd_1464::node<key_12_1434,next_12_1435> * HP_1436(next_12_1435,tl_1465)&
hd_1464!=null & tl_1465!=hd_1464(4,5),
 GP_23(hd_1470,tl_1471,next_12_1472) ::= 
 GP_23(next_20_1462,tl_1471,hd_1463) * hd_1470::node<key_12_1434,hd_1463>&
 tl_1471!=next_20_1462 & next_20_1462!=null & next_12_1472=hd_1470
 or hd_1470::node<key_12_1434,next_12_1472>&next_12_1472=null
 (4,5),
 HP_1436(next_12_1468,tl_1469) ::= 
 next_12_1468::node<key_12_1434,next_12_1435> * 
 HP_1436(next_12_1435,tl_1469)&tl_1469!=next_12_1468
 or emp&next_12_1468=null
 (4,5)]
*************************************

!!! INFERRED SHAPE SPEC: EBase exists (Expl)[](Impl)[key_12_1434](ex)[]hd::node<key_12_1434,next_12_1435> * 
       next_12_1435::HP_1436{}<tl>&hd!=null & tl!=hd&{FLOW,(1,29)=__flow#E}[]
         EBase exists (Expl)[](Impl)[key_12_1434](ex)[]emp&MayLoop[]&
               {FLOW,(4,5)=__norm#E}[]
                 EAssume 
                   (exists tl: hd::GP_23{}<tl,res>&{FLOW,(4,5)=__norm#E})[]
                   
Checking procedure circular_list_delete_back$node... 


******************************
   ******* SPECIFICATION1 ********
******************************
 infer[@shape HP_26,GP_27]requires HP_26(x)&
truerequires emp
 ensures GP_27(x,res)&true{,(4,5)=__norm#E};

*************************************
*******shape relational assumptions ********
*************************************
[ // BIND
(0)HP_26(x)&true --> x::node<key_33_1541,next_33_1542> * 
HP_1543(next_33_1542)&
true,
 // PRE
(2;0)HP_1543(next_33_1542)&
true --> next_33_1542::node<key_12_1567,next_12_1568> * 
HP_1569(next_12_1568)&
true,
 // PRE
(2;0)x::node<key_33_1541,next_33_1542> * HP_1569(next_12_1562)&
x!=next_33_1542 --> next_12_1562::HP_1436<x> * HP_1570(x)&
true,
 // BIND
(2;0)HP_1570(x)&true --> x::node<key_39_1578,next_39_1579> * 
HP_1580(next_39_1579)&
true,
 // POST
(2;0)x::node<key_39_1578,res>&true --> GP_27(x,res)&
true]

Procedure circular_list_delete_back$node SUCCESS.

*********************************************************
*******relational definition ********
*********************************************************
[ HP_26(x_1615) ::= next_33_1584::node<key_12_1567,next_12_1568> * 
x_1615::node<key_33_1583,next_33_1584> * next_12_1568::HP_1436<DP_DP_HP_1625>(4,5),
 GP_27(x_1627,res_1628) ::= x_1627::node<key_39_1578,res_1628>(4,5),
 GP_23(hd_1470,tl_1471,next_12_1472) ::= 
 GP_23(next_20_1462,tl_1471,hd_1463) * hd_1470::node<key_12_1434,hd_1463>&
 tl_1471!=next_20_1462 & next_20_1462!=null & next_12_1472=hd_1470
 or hd_1470::node<key_12_1434,next_12_1472>&next_12_1472=null
 (4,5),
 HP_1436(next_12_1468,tl_1469) ::= 
 next_12_1468::node<key_12_1434,next_12_1435> * 
 HP_1436(next_12_1435,tl_1469)&tl_1469!=next_12_1468
 or emp&next_12_1468=null
 (4,5),
 HP_22(hd_1464,tl_1465) ::= hd_1464::node<key_12_1434,next_12_1435> * HP_1436(next_12_1435,tl_1465)&
hd_1464!=null & tl_1465!=hd_1464(4,5)]
*************************************

!!! INFERRED SHAPE SPEC: EBase exists (Expl)[](Impl)[key_12_1567; 
       key_33_1583](ex)[]next_33_1584::node<key_12_1567,next_12_1568> * 
       x::node<key_33_1583,next_33_1584> * 
       next_12_1568::HP_1436{}<DP_DP_HP_1625>&{FLOW,(1,29)=__flow#E}[]
         EBase exists (Expl)[](Impl)[key_12_1567; key_33_1583](ex)[]emp&
               MayLoop[]&{FLOW,(4,5)=__norm#E}[]
                 EAssume 
                   (exists key_39_1578: x::node<key_39_1578,res>&
                   {FLOW,(4,5)=__norm#E})[]
                   Stop z3... 134 invocations Stop Omega... 66 invocations 
1 false contexts at: ( (36,2) )

!!! log(small):(0.106746,662)
Total verification time: 0.232 second(s)
	Time spent in main process: 0.144 second(s)
	Time spent in child processes: 0.088 second(s)
	Z3 Prover Time: 0.004 second(s)
