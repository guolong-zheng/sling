dynsl.py:144 - Inferring post-conditions at the location 16 ...

dynsl.py:144 - Inferring pre-conditions at the location 10 ...

dynsl.py:144 - Inferring post-conditions at the location 30 ...

dynsl.py:144 - Inferring post-conditions at the location 23 ...

dynsl.py:194 - ==============================
dynsl.py:195 - Precondition at location 10:
dynsl.py:202 - tree(x) & True
dynsl.py:204 - Corresponding postconditions:
dynsl.py:208 - Postconditions at location 16:
dynsl.py:213 - x:b_node->b_node{r, nil, fv!17, fv!18} * tree(r) & r=res
dynsl.py:208 - Postconditions at location 30:
dynsl.py:213 - tree(xr) * x:b_node->b_node{xl, xr, fv!359, fv!360} * tree(xl) & xr=r & x=res
dynsl.py:213 - tree(xr) * x:b_node->b_node{xl, xr, fv!369, fv!370} * tree(xl) & r=xr & x=res
dynsl.py:213 - tree(xr) * x:b_node->b_node{xl, xr, fv!261, fv!262} * tree(xl) & r=xr & x=res
dynsl.py:213 - tree(xr) * x:b_node->b_node{xl, xr, fv!251, fv!252} * tree(xl) & r=xr & x=res
dynsl.py:208 - Postconditions at location 23:
dynsl.py:213 - x:b_node->b_node{l, xr, fv!477, fv!478} * tree(l) * xl:b_node->b_node{l, xr, fv!607, fv!608} & xr=nil & x=res
dynsl.py:213 - x:b_node->b_node{l, xr, fv!467, fv!468} * tree(l) * xl:b_node->b_node{l, xr, fv!537, fv!538} & xr=nil & x=res
dynsl.py:213 - x:b_node->b_node{l, xr, fv!467, fv!468} * tree(l) * xl:b_node->b_node{l, xr, fv!557, fv!558} & xr=nil & x=res
dynsl.py:213 - x:b_node->b_node{l, xr, fv!477, fv!478} * tree(l) * xl:b_node->b_node{l, xr, fv!627, fv!628} & xr=nil & x=res
dynsl.py:213 - x:b_node->b_node{l, xr, fv!477, fv!478} * tree(l) * xl:b_node->b_node{l, xr, fv!617, fv!618} & xr=nil & x=res
dynsl.py:213 - x:b_node->b_node{l, xr, fv!477, fv!478} * tree(l) * xl:b_node->b_node{l, xr, fv!637, fv!638} & xr=nil & x=res
dynsl.py:213 - x:b_node->b_node{l, xr, fv!467, fv!468} * tree(l) * xl:b_node->b_node{l, xr, fv!547, fv!548} & xr=nil & x=res
dynsl.py:213 - x:b_node->b_node{l, xr, fv!467, fv!468} * tree(l) * xl:b_node->b_node{l, xr, fv!527, fv!528} & xr=nil & x=res
dynsl.py:231 - ==============================
dynsl.py:254 - Number of locations: 4
dynsl.py:255 - Number of traces: 6
dynsl.py:256 - Number of pre-defined predicates: 1
dynsl.py:258 - Number of free variables: 106
dynsl.py:259 - Number of atomic singleton predicates: 21
dynsl.py:260 - Number of atomic inductive predicates: 18
dynsl.py:261 - Number of pure constraints: 25
dynsl.py:262 - Number of total invs: 14
dynsl.py:263 - Number of pres:1
dynsl.py:264 - Number of post:13
dynsl.py:265 - Number of loop:0
dynsl.py:266 - Running time (sec): 7.63897609711
../simple_example_update/prio_tree//delete_rec,4,6,14,106,21,18,25,14,1,13(3),0,7.63,3
