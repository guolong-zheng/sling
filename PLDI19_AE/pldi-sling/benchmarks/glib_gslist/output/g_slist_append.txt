dynsl.py:144 - Inferring post-conditions at the location 18 ...

dynsl.py:144 - Inferring pre-conditions at the location 11 ...

dynsl.py:144 - Inferring post-conditions at the location 21 ...

dynsl.py:194 - ==============================
dynsl.py:195 - Precondition at location 11:
dynsl.py:202 - list(list) & True
dynsl.py:202 - lseg(list, nil) & True
dynsl.py:204 - Corresponding postconditions:
dynsl.py:208 - Postconditions at location 18:
dynsl.py:213 - lseg(list, last) * lseg(last, new_list) * lseg(new_list, nil) & list=res
dynsl.py:213 - lseg(list, last) * lseg(last, new_list) * new_list:node->node{fv!66, nil} & list=res
dynsl.py:213 - lseg(list, last) * lseg(last, new_list) * list(new_list) & list=res
dynsl.py:213 - lseg(list, last) * last:node->node{fv!57, new_list} * lseg(new_list, nil) & list=res
dynsl.py:213 - lseg(list, last) * last:node->node{fv!57, new_list} * new_list:node->node{fv!75, nil} & list=res
dynsl.py:213 - lseg(list, last) * last:node->node{fv!57, new_list} * list(new_list) & list=res
dynsl.py:208 - Postconditions at location 21:
dynsl.py:213 - lseg(new_list, list) & new_list=res & list=nil
dynsl.py:213 - new_list:node->node{fv!141, list} & new_list=res & list=nil
dynsl.py:213 - list(new_list) & new_list=res & list=nil
dynsl.py:213 - new_list:node->node{fv!132, list} & new_list=res & list=nil
dynsl.py:213 - lseg(new_list, nil) & new_list=res & list=nil
dynsl.py:231 - ==============================
dynsl.py:254 - Number of locations: 3
dynsl.py:255 - Number of traces: 4
dynsl.py:256 - Number of pre-defined predicates: 2
dynsl.py:258 - Number of free variables: 48
dynsl.py:259 - Number of atomic singleton predicates: 7
dynsl.py:260 - Number of atomic inductive predicates: 18
dynsl.py:261 - Number of pure constraints: 16
dynsl.py:262 - Number of total invs: 13
dynsl.py:263 - Number of pres:2
dynsl.py:264 - Number of post:11
dynsl.py:265 - Number of loop:0
dynsl.py:266 - Running time (sec): 2.6713078022
../simple_example_update/glib_gslist//g_slist_append,3,4,14,48,7,18,16,13,2(1),11(5),0,2.67
